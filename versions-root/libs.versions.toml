[versions]
# core library version
kotlinx-rpc = "0.3.0-SNAPSHOT"

# kotlin
kotlin-lang = "2.0.10"

# kotlin independent versions
detekt-analyzer = "1.23.6"
coroutines = "1.9.0"
ktor = "3.0.0-rc-1"
kotlin-logging = "7.0.0"
slf4j = "2.0.16"
logback = "1.3.14"
gradle-plugin-publish = "1.3.0"
kotlin-wrappers = "1.0.0-pre.812"
junit4 = "4.13.2"
junit5 = "5.11.0"
intellij = "213.7172.53"
gradle-doctor = "0.10.0"
kotlinx-browser = "0.1"

# Stub versions – relpaced based on kotlin, mostly for gradle-related (plugins) dependencies
#  but also for dependencies for compiler-specific modules.
#
# The current version is the one that is used with the latest Kotlin.
#
# NOTE: When updating kotlin-versions-lookup.csv, update the latest version here for the Renovate configs
ksp = "0.0.0"
atomicfu = "0.25.0"
serialization = "1.7.3"
detekt-gradle-plugin = "1.23.7"
gradle-kotlin-dsl = "5.1.1"
binary-compatibility-validator = "0.16.3"
kover = "0.8.3"

[libraries]
# kotlinx.rpc – references to the included builds
# as they're local to the project, kotlinx-rpc- prefix is omitted
compiler-plugin-cli = { module = "org.jetbrains.kotlinx:compiler-plugin-cli" }

# kotlin
kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin-lang" }
kotlin-stdlib-jdk7 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk7", version.ref = "kotlin-lang" }
kotlin-stdlib-jdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlin-lang" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin-lang" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin-lang" }
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin-lang" }
kotlin-script-runtime = { module = "org.jetbrains.kotlin:kotlin-script-runtime", version.ref = "kotlin-lang" }
kotlin-annotations-jvm = { module = "org.jetbrains.kotlin:kotlin-annotations-jvm", version.ref = "kotlin-lang" }
kotlin-gradle-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin-lang" }

kotlin-compiler = { module = "org.jetbrains.kotlin:kotlin-compiler", version.ref = "kotlin-lang" }
kotlin-compiler-embeddable = { module = "org.jetbrains.kotlin:kotlin-compiler-embeddable" }
kotlin-compiler-test-framework = { module = "org.jetbrains.kotlin:kotlin-compiler-internal-test-framework", version.ref = "kotlin-lang" }
serialization-plugin = { module = "org.jetbrains.kotlin:kotlin-serialization-compiler-plugin", version.ref = "kotlin-lang" }
kotlinx-browser = { module = "org.jetbrains.kotlinx:kotlinx-browser", version.ref = "kotlinx-browser" }

# serialization
serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "serialization" }
serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization" }
serialization-cbor = { module = "org.jetbrains.kotlinx:kotlinx-serialization-cbor", version.ref = "serialization" }
serialization-protobuf = { module = "org.jetbrains.kotlinx:kotlinx-serialization-protobuf", version.ref = "serialization" }

# ksp, version will be inherited from kotlin-lang and kotlin-versions-lookup.json lookup table
ksp-runtime-api = { module = "com.google.devtools.ksp:symbol-processing-api", version.ref = "ksp" }
ksp-gradle-plugin = { module = "com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin", version.ref = "ksp" }

# ktor
ktor-websockets = { module = "io.ktor:ktor-websockets", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-websockets = { module = "io.ktor:ktor-server-websockets", version.ref = "ktor" }
ktor-server-test-host = { module = "io.ktor:ktor-server-test-host", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-websockets = { module = "io.ktor:ktor-client-websockets", version.ref = "ktor" }

# slf4j
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }

# junit
junit4 = { module = "junit:junit", version.ref = "junit4" }
junit5-bom = { module = "org.junit:junit-bom", version.ref = "junit5" }
junit5-jupiter = { module = "org.junit.jupiter:junit-jupiter" }
junit5-platform-commons = { module = "org.junit.platform:junit-platform-commons" }
junit5-platform-launcher = { module = "org.junit.platform:junit-platform-launcher" }
junit5-platform-runner = { module = "org.junit.platform:junit-platform-runner" }
junit5-platform-suite-api = { module = "org.junit.platform:junit-platform-suite-api" }

# other
kotlin-logging = { module = "io.github.oshai:kotlin-logging", version.ref = "kotlin-logging" }
kotlin-logging-legacy = { module = "io.github.microutils:kotlin-logging", version.ref = "kotlin-logging" }
coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
coroutines-debug = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-debug", version.ref = "coroutines" }
detekt-gradle-plugin = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt-gradle-plugin" }
kover-gradle-plugin = { module = "org.jetbrains.kotlinx:kover-gradle-plugin", version.ref = "kover" }
kotlin-js-wrappers = { module = "org.jetbrains.kotlin-wrappers:kotlin-js", version.ref = "kotlin-wrappers" }
gradle-kotlin-dsl-pluigns = { module = "org.gradle.kotlin:gradle-kotlin-dsl-plugins", version.ref = "gradle-kotlin-dsl" }
intellij-util = { module = "com.jetbrains.intellij.platform:util", version.ref = "intellij" }
gradle-doctor-plugin = { module = "com.osacky.doctor:doctor-plugin", version.ref = "gradle-doctor" }

[plugins]
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin-lang" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin-lang" }
serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin-lang" }

ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt-gradle-plugin" }
binary-compatibility-validator = { id = "org.jetbrains.kotlinx.binary-compatibility-validator", version.ref = "binary-compatibility-validator" }
atomicfu-old = { id = "kotlinx-atomicfu", version.ref = "atomicfu" }
atomicfu-new = { id = "org.jetbrains.kotlinx.atomicfu", version.ref = "atomicfu" }
gradle-kotlin-dsl = { id = "org.gradle.kotlin.kotlin-dsl", version.ref = "gradle-kotlin-dsl" }
kover = { id = "org.jetbrains.kotlinx.kover", version.ref = "kover" }
gradle-plugin-publish = { id = "com.gradle.plugin-publish", version.ref = "gradle-plugin-publish" }

# gradle-conventions project
conventions-common = { id = "conventions-common", version.ref = "kotlinx-rpc" }
conventions-jvm = { id = "conventions-jvm", version.ref = "kotlinx-rpc" }
conventions-kmp = { id = "conventions-kmp", version.ref = "kotlinx-rpc" }
conventions-gradle-publish = { id = "conventions-gradle-publish", version.ref = "kotlinx-rpc" }
conventions-kover = { id = "conventions-kover", version.ref = "kotlinx-rpc" }
conventions-gradle-doctor = { id = "conventions-gradle-doctor", version.ref = "kotlinx-rpc" }
compiler-specific-module = { id = "compiler-specific-module", version.ref = "kotlinx-rpc" }

# gradle-plugin project
kotlinx-rpc = { id = "org.jetbrains.kotlinx.rpc.plugin", version.ref = "kotlinx-rpc" }
