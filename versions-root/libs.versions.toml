[versions]
# core library version
kotlinx-rpc = "0.10.0-SNAPSHOT"

# kotlin
kotlin-lang = "2.2.10" # or env.KOTLIN_VERSION
kotlin-compiler = "0.0.0" # default to kotlin-lang or env.KOTLIN_COMPILER_VERSION

# kotlin independent versions
detekt-analyzer = "1.23.6"
coroutines = "1.10.2"
ktor = "3.2.1"
kotlin-logging = "7.0.7"
slf4j = "2.0.17"
logback = "1.3.14"
gradle-plugin-publish = "1.3.1"
kotlin-wrappers = "2025.6.11"
junit4 = "4.13.2"
junit5 = "5.13.2"
intellij = "241.19416.19"
kotlinx-browser = "0.3"
dokka = "2.0.0"
puppeteer = "24.9.0"
atomicfu = "0.29.0"
serialization = "1.8.1"
detekt-gradle-plugin = "1.23.8"
kover = "0.9.1"
develocity = "3.19.2"
common-custom-user-data = "2.3"
compat-patrouille = "0.0.1"
grpc = "1.69.0"
grpc-kotlin = "1.4.1"
protobuf = "4.29.3"
protobuf-gradle = "0.9.4"

[libraries]
# kotlinx.rpc â€“ references to the included builds
# as they're local to the project, kotlinx-rpc- prefix is omitted
compiler-plugin-cli = { module = "org.jetbrains.kotlinx:compiler-plugin-cli" }
compiler-plugin-k2 = { module = "org.jetbrains.kotlinx:compiler-plugin-k2" }
compiler-plugin-backend = { module = "org.jetbrains.kotlinx:compiler-plugin-backend" }
compiler-plugin-common = { module = "org.jetbrains.kotlinx:compiler-plugin-common" }

# kotlin
kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin-lang" }
kotlin-stdlib-jdk7 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk7", version.ref = "kotlin-lang" }
kotlin-stdlib-jdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlin-lang" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin-lang" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin-lang" }
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin-lang" }
kotlin-test-junit5 = { module = "org.jetbrains.kotlin:kotlin-test-junit5", version.ref = "kotlin-lang" }
kotlin-script-runtime = { module = "org.jetbrains.kotlin:kotlin-script-runtime", version.ref = "kotlin-lang" }
kotlin-annotations-jvm = { module = "org.jetbrains.kotlin:kotlin-annotations-jvm", version.ref = "kotlin-lang" }
kotlin-gradle-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin-lang" }

kotlin-compiler = { module = "org.jetbrains.kotlin:kotlin-compiler", version.ref = "kotlin-compiler" }
kotlin-compiler-test-framework = { module = "org.jetbrains.kotlin:kotlin-compiler-internal-test-framework", version.ref = "kotlin-lang" }
serialization-plugin = { module = "org.jetbrains.kotlin:kotlin-serialization-compiler-plugin", version.ref = "kotlin-compiler" }
serialization-plugin-forIde = { module = "org.jetbrains.kotlin:kotlinx-serialization-compiler-plugin-for-ide", version.ref = "kotlin-compiler" }
kotlinx-browser = { module = "org.jetbrains.kotlinx:kotlinx-browser", version.ref = "kotlinx-browser" }

# serialization
serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "serialization" }
serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization" }
serialization-cbor = { module = "org.jetbrains.kotlinx:kotlinx-serialization-cbor", version.ref = "serialization" }
serialization-protobuf = { module = "org.jetbrains.kotlinx:kotlinx-serialization-protobuf", version.ref = "serialization" }

# ktor
ktor-websockets = { module = "io.ktor:ktor-websockets", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-websockets = { module = "io.ktor:ktor-server-websockets", version.ref = "ktor" }
ktor-server-test-host = { module = "io.ktor:ktor-server-test-host", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-websockets = { module = "io.ktor:ktor-client-websockets", version.ref = "ktor" }

# slf4j
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }

# junit
junit4 = { module = "junit:junit", version.ref = "junit4" }
junit5-bom = { module = "org.junit:junit-bom", version.ref = "junit5" }
junit5-jupiter = { module = "org.junit.jupiter:junit-jupiter" }
junit5-platform-commons = { module = "org.junit.platform:junit-platform-commons" }
junit5-platform-launcher = { module = "org.junit.platform:junit-platform-launcher" }
junit5-platform-runner = { module = "org.junit.platform:junit-platform-runner" }
junit5-platform-suite-api = { module = "org.junit.platform:junit-platform-suite-api" }

# dokka
dokka-core = { module = "org.jetbrains.dokka:dokka-core", version.ref = "dokka" }
dokka-base = { module = "org.jetbrains.dokka:dokka-base", version.ref = "dokka" }
dokka-test-api = { module = "org.jetbrains.dokka:dokka-test-api", version.ref = "dokka" }
dokka-base-test-utils = { module = "org.jetbrains.dokka:dokka-base-test-utils", version.ref = "dokka" }
dokka-analysis-kotlin-symbols = { module = "org.jetbrains.dokka:analysis-kotlin-symbols", version.ref = "dokka" }
dokka-rpc-plugin = { module = "org.jetbrains.kotlinx:dokka-rpc-plugin", version.ref = "kotlinx-rpc" }

# grpc and protobuf
protoc = { module = "com.google.protobuf:protoc", version.ref = "protobuf" }
protobuf-java = { module = "com.google.protobuf:protobuf-java", version.ref = "protobuf" }
protobuf-java-util = { module = "com.google.protobuf:protobuf-java-util", version.ref = "protobuf" }
protobuf-kotlin = { module = "com.google.protobuf:protobuf-kotlin", version.ref = "protobuf" }
protobuf-gradle-plugin = { module = "com.google.protobuf:protobuf-gradle-plugin", version.ref = "protobuf-gradle" }
grpc-stub = { module = "io.grpc:grpc-stub", version.ref = "grpc" }
grpc-util = { module = "io.grpc:grpc-util", version.ref = "grpc" }
grpc-netty = { module = "io.grpc:grpc-netty", version.ref = "grpc" }
grpc-protobuf = { module = "io.grpc:grpc-protobuf", version.ref = "grpc" }
grpc-kotlin-stub = { module = "io.grpc:grpc-kotlin-stub", version.ref = "grpc-kotlin" }
grpc-protoc-gen-java = { module = "io.grpc:protoc-gen-grpc-java", version.ref = "grpc" }
grpc-protoc-gen-kotlin = { module = "io.grpc:protoc-gen-grpc-kotlin", version.ref = "grpc-kotlin" }

# other
kotlin-logging = { module = "io.github.oshai:kotlin-logging", version.ref = "kotlin-logging" }
kotlin-logging-legacy = { module = "io.github.microutils:kotlin-logging", version.ref = "kotlin-logging" }
coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
coroutines-debug = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-debug", version.ref = "coroutines" }
kotlin-js-wrappers = { module = "org.jetbrains.kotlin-wrappers:kotlin-js", version.ref = "kotlin-wrappers" }
intellij-util = { module = "com.jetbrains.intellij.platform:util", version.ref = "intellij" }
atomicfu = { module = "org.jetbrains.kotlinx:atomicfu", version.ref = "atomicfu" }
develocity = { module = "com.gradle:develocity-gradle-plugin", version.ref = "develocity" }
common-custom-user-data = { module ="com.gradle:common-custom-user-data-gradle-plugin", version.ref = "common-custom-user-data" }

# gradle plugins as lib deps
detekt-gradle-plugin = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt-gradle-plugin" }
kover-gradle-plugin = { module = "org.jetbrains.kotlinx:kover-gradle-plugin", version.ref = "kover" }
dokka-gradle-plugin = { module = "org.jetbrains.dokka:dokka-gradle-plugin", version.ref = "dokka" }
gradle-publish-gradle-plugin = { module = "com.gradle.publish:plugin-publish-plugin", version.ref = "gradle-plugin-publish" }
compat-patrouille-gradle-plugin = { module = "com.gradleup.compat.patrouille:compat-patrouille-gradle-plugin", version.ref = "compat-patrouille" }

[plugins]
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin-lang" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin-lang" }
serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin-lang" }

detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt-gradle-plugin" }
atomicfu = { id = "org.jetbrains.kotlinx.atomicfu", version.ref = "atomicfu" }
kover = { id = "org.jetbrains.kotlinx.kover", version.ref = "kover" }
gradle-plugin-publish = { id = "com.gradle.plugin-publish", version.ref = "gradle-plugin-publish" }
dokka = { id = "org.jetbrains.dokka", version.ref = "dokka" }
protobuf = { id = "com.google.protobuf", version.ref = "protobuf-gradle" }

# gradle-conventions project
conventions-common = { id = "conventions-common" }
conventions-jvm = { id = "conventions-jvm" }
conventions-kmp = { id = "conventions-kmp" }
conventions-gradle-publish = { id = "conventions-gradle-publish" }
conventions-kover = { id = "conventions-kover" }
conventions-npm = { id = "conventions-npm" }
conventions-root = { id = "conventions-root" }
conventions-dokka-spec = { id = "conventions-dokka-spec" }
conventions-dokka-public = { id = "conventions-dokka-public" }
compiler-specific-module = { id = "compiler-specific-module" }

# gradle-plugin project
kotlinx-rpc = { id = "org.jetbrains.kotlinx.rpc.plugin" }
