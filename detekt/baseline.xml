<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright 2023-2024 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.
  -->

<SmellBaseline>
  <ManuallySuppressedIssues>
    <ID>ReturnCount:ExceptionUtils.jvm.kt$@InternalKRPCApi public actual fun SerializedException.deserialize(): Throwable</ID>
    <ID>CyclomaticComplexMethod:RPCServerService.kt$RPCServerService$@OptIn(InternalCoroutinesApi::class) private fun handleCall(callId: String, callData: RPCMessage.CallData)</ID>
    <ID>RethrowCaughtException:KRPCTransportTestBase.kt$KRPCTransportTestBase$throw e</ID>
    <ID>GlobalCoroutineUsage:Broadcast.kt$&lt;no name provided>$GlobalScope.launch { val job = receiver.coroutineContext.job job.join() val cause = if (!job.isActive) job.getCancellationException() else null mutex.withLock { if (cause == null) return@withLock if (waiting.isEmpty()) return@withLock logger.warn { "Cancelling service with unprocessed messages. Cause: $cause" } for (call in waiting) { val message = RPCMessage.CallException(call.callId, call.serviceType, serializeException(cause)) runCatching { send(message) } } } }</ID>
    <ID>GlobalCoroutineUsage:KtorTransport.kt$KtorTransport$GlobalScope.launch { webSocketSession.close() }</ID>
  </ManuallySuppressedIssues>
  <CurrentIssues/>
</SmellBaseline>
