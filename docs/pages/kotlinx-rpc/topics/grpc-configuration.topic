<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Copyright 2023-2025 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.
  -->

<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Configuration" id="grpc-configuration">

    <tldr>
        <p>
            Artifacts for gRPC integration are published <a
                href="https://public.jetbrains.space/p/krpc/packages/maven/grpc">separately</a>
            and updated frequently, independent of the main releases.
        </p>
        <p>
            <a href="https://maven.pkg.jetbrains.space/public/p/krpc/grpc">
                <img alt="Latest dev version"
                     src="https://img.shields.io/badge/dynamic/xml?url=https%3A%2F%2Fmaven.pkg.jetbrains.space%2Fpublic%2Fp%2Fkrpc%2Fgrpc%2Forg%2Fjetbrains%2Fkotlinx%2Fkotlinx-rpc-core%2Fmaven-metadata.xml&amp;query=%2F%2Fmetadata%2Fversioning%2Flatest&amp;label=Latest%20dev%20version&amp;color=forest-green&amp;cacheSeconds=60"/>
            </a>
        </p>
    </tldr>

    <p>
        <a href="https://grpc.io">gRPC</a> integration is available in an experimental state.
        The artifacts are published separately in our <a
            href="https://public.jetbrains.space/p/krpc/packages/maven/grpc">Space repository</a>.
    </p>
    <chapter title="Dependencies configuration" id="dependencies-configuration">
        <p>Below is an example of a project setup.</p>
        <code>settings.gradle.kts</code>:
        <code-block lang="Kotlin">
            pluginManagement {
                repositories {
                    gradlePluginPortal()
                    mavenCentral()
                    maven("https://maven.pkg.jetbrains.space/public/p/krpc/grpc")
                }
            }
        </code-block>
        <p>
            <code>build.gradle.kts</code>:
        </p>
        <code-block lang="Kotlin">
            plugins {
                kotlin("jvm") version "%kotlin-version%"
                id("org.jetbrains.kotlinx.rpc.plugin") version "&lt;version&gt;"
            }

            repositories {
                mavenCentral()
                maven("https://maven.pkg.jetbrains.space/public/p/krpc/grpc")
            }

            dependencies {
                implementation("org.jetbrains.kotlinx:kotlinx-rpc-grpc-core:&lt;version&gt;")
                implementation("ch.qos.logback:logback-classic:1.5.16")
                implementation("io.grpc:grpc-netty:1.73.0")
            }
        </code-block>
        <p>Here <code>&lt;version&gt;</code> comes from the badge above.</p>
        <note>
            We prohibit using <code>com.google.protobuf</code> Gradle Plugin
            in projects with our plugin to prevent conflicts.
        </note>
    </chapter>
    <chapter id="working-with-proto-files">
        <title>
            Working with proto-files
        </title>
        <p>
            The minimum required configuration looks like this:
        </p>
        <code-block lang="Kotlin">
            rpc {
                grpc()
            }
        </code-block>
        <p>
            This enables code generation for your <path>.proto</path> files.
            Special source sets are created for them:
        </p>
        <list>
            <li>
                <code>main</code> and <code>test</code> - source sets for Kotlin/JVM projects.
                Default source directories are <path>src/main/proto</path> and <path>src/test/proto</path>.
            </li>
            <li>
                <code>jvmMain</code> and <code>jvmTest</code> - source sets for Kotlin/Multiplatform projects.
                Default source directories are <path>src/jsmMain/proto</path> and <path>src/jvmTest/proto</path>.
                <warning>
                    These will change to <path>src/commonMain/proto</path> and <path>src/commonTest/proto</path> in the
                    future.
                </warning>
            </li>
            <li>
                Android source set support is not available yet but will be included in a future release.
            </li>
        </list>
        <p>
            All source sets are generated automatically and available
            via the <code>protoSourceSets</code> Gradle Project extension:
        </p>
        <code-block lang="Kotlin">
            protoSourceSets {
                // for Kotlin/JVM projects
                main {
                    proto {
                        // SourceDirectorySet for .proto files
                        include("**/main.proto") // optional filters
                        exclude("**/excluded.proto")
                    }
                }
                test { }

                // for Kotlin/Multiplatform projects
                jvmMain { }
                jvmTest { }
            }
        </code-block>
        <p>
            By default, the following source directories are generated:
        </p>
        <list>
            <li>
                <code>java</code> - protobuf Java declarations, attached to <code>java</code> sources.
            </li>
            <li>
                <code>grpc-java</code> - gRPC Java declarations, attached to <code>java</code> sources.
            </li>
            <li>
                <code>grpc-kotlin</code> - gRPC Kotlin wrappers for Java, attached to <code>kotlin</code> sources.
            </li>
            <li>
                <code>kotlin-multiplatform</code> - wrappers for all of the above, attached to <code>kotlin</code> sources.
            </li>
        </list>
        <note>
            Only the declarations from the <code>kotlin-multiplatform</code> source set are intended to be used.
            The others are for internal use only and will be removed in a future release.
        </note>
    </chapter>
    <chapter title="Limitations" id="limitations">
        <p>
            Source set hierarchy is not supported, and we have no plans to support it.
            That means, for example,
            that you can't have <code>jsMain</code> and <code>jsTest</code> source sets for proto files.
            The same applies for native and Wasm targets.
            Currently, <path>.proto</path> files are only supported in the <code>jvmMain</code> and <code>jvmTest</code> source sets.
            (Later to be replaced with <code>commonMain</code> and <code>commonTest</code>)
            <br/>
            <br/>
            If you have a use case for other source sets and a hierarchy,
            please <a href="https://github.com/Kotlin/kotlinx-rpc/issues/new?template=feature_request.md">report it</a>.
        </p>
    </chapter>
    <chapter title="Protoc plugins" id="protoc-plugins">
        <p>
            To generate code, we use <a href="https://protobuf.dev/reference/other/"><emphasis>protoc</emphasis> plugins</a>.
            By default, we use the following plugins:
        </p>
        <list>
            <li>
                <a href="https://buf.build/protocolbuffers/java">protobuf-java</a> - Buf's version of the official Java
                plugin.
            </li>
            <li>
                <a href="https://buf.build/grpc/java">grpc-java</a> - Buf's version of the official gRPC Java plugin.
            </li>
            <li>
                <a href="https://buf.build/grpc/kotlin">grpc-kotlin</a> - Buf's version of the official gRPC Kotlin
                plugin.
            </li>
            <li>
                <code>kotlin-multiplatform</code> - out own protoc plugin.
            </li>
        </list>
        <p>
            You can configure the plugins in the <code>rpc</code> block:
        </p>
        <code-block lang="Kotlin">
            rpc {
                grpc {
                    // configure plugins here
                    protocPlugins {
                        kotlinMultiplatform { }
                        protobufJava { }
                        grpcJava { }
                        grpcKotlin { }

                        create("myPlugin") { }
                    }
                }
            }
        </code-block>
        <p>
            <code>protocPlugins</code> is a <code>NamedDomainObjectContainer&lt;ProtocPlugin&gt;</code>,
            which allows you to add your own plugins.
        </p>
        <p>
            Each plugin is represented by a <code>ProtocPlugin</code> and can be configured like this:
        </p>
        <code-block lang="Kotlin">
            // Or use protocPlugins.kotlinMultiplatform for default plugins
            protocPlugins.create("myPlugin") {
                isJava = true // add generated code to the java source set

                // Add plugin options
                options.put("myOption")
                options.put("myOption1", "myValue")

                // Plugin can be local or remote

                // For a local plugin
                local {
                    // Path to the plugin executable
                    executor("java", "-jar", "myPlugin.jar")
                    // or
                    javaJar("myPlugin.jar") // uses java.home
                    // or
                    javaJar("myPlugin.jar", "path/to/my/java")
                    // or
                    executor("myCustomExe.exe")
                }

                // For a remote plugin
                remote {
                    // Buf's BSR locator
                    locator = "buf.build/grpc/go"
                }

                // Additional Buf configuration options:
                strategy = ProtocPlugin.Strategy.All
                includeImports = false
                includeWkt = false
                types = listOf("my.package.MyType")
                excludeTypes = listOf("my.package.NotMyType")
            }
        </code-block>
        <p>
            Buf's plugin <a href="https://buf.build/docs/configuration/v2/buf-gen-yaml#plugins">configuration</a>
            options:
        </p>
        <deflist>
            <def title="strategy" id="strategy">
                <a href="https://buf.build/docs/configuration/v2/buf-gen-yaml/#strategy">strategy</a>
                — <code>All</code> or <code>Directory</code>
            </def>
            <def title="includeImports" id="includeImports">
                <a href="https://buf.build/docs/configuration/v2/buf-gen-yaml/#include_imports">includeImports</a>
                — <code>true</code> or <code>false</code>
            </def>
            <def title="includeWkt" id="includeWkt">
                <a href="https://buf.build/docs/configuration/v2/buf-gen-yaml/#include_wkt">includeWkt</a>
                — <code>true</code> or <code>false</code>
            </def>
            <def title="types" id="types">
                <a href="https://buf.build/docs/configuration/v2/buf-gen-yaml/#types">types</a>
                — a list of types to generate.
            </def>
            <def title="excludeTypes" id="excludeTypes">
                <a href="https://buf.build/docs/configuration/v2/buf-gen-yaml/#exclude-types">excludeTypes</a>
                — a list of types to exclude from generation.
            </def>
        </deflist>
        <p>
            Once a plugin is added to the <code>protocPlugins</code> container, it can be used in a source set:
        </p>
        <code-block lang="Kotlin">
            protoSourceSets {
                jvmMain {
                    protocPlugin(rpc.grpc.protocPlugins.named("myPlugin"))
                }
            }
        </code-block>
    </chapter>
    <chapter title="Buf" id="buf">
        <p>
            As you may already notice,
            we use <a href="https://buf.build/docs">Buf</a> —
            a tool for managing and building Protobuf schemas.
            We use its CLI to execute tasks like code generation.
        </p>
        <note>
            We <b>don't</b> use Buf's <code>build.buf</code> Gradle Plugin
            and disallow using it in projects that apply our plugin, in order to avoid conflicts.
        </note>
        <chapter title="Generated Workspace" id="generated-workspace">
            <p>
                To improve the developer experience, we introduce the concept of a <b>generated workspace</b>.
                It's a directory that contains all the necessary files for Buf to work:
            </p>
            <list>
                <li>
                    Filtered <path>.proto</path> files
                </li>
                <li>
                    Generated <path>buf.yaml</path> file
                </li>
                <li>
                    Generated <path>buf.gen.yaml</path> file
                </li>
                <li>
                    Automatically managed imports from a <code>main</code> source set to a <code>test</code> source set,
                    making imports intuitive.
                </li>
            </list>
            <p>
                This workspace is created automatically for each source set
                and can be found in the <path>build/protoBuild</path> directory.
                You don't need to do anything with it, unless you want to customise it.
            </p>
        </chapter>
        <chapter title="Tasks" id="buf-tasks">
            <p>
                If your project is configured to use gRPC, the following tasks will be generated:
            </p>
            <list>
                <li>
                    <code>generateBufYaml&lt;sourceSet&gt;</code>
                    — generates <path>buf.yaml</path>
                    <br/>
                    <br/>
                    Type: <code>kotlinx.rpc.buf.tasks.GenerateBufYaml</code>
                </li>
                <li>
                    <code>generateBufGenYaml&lt;sourceSet&gt;</code>
                    — generates <path>buf.gen.yaml</path>
                    <br/>
                    <br/>
                    Type: <code>kotlinx.rpc.buf.tasks.GenerateBufGenYaml</code>
                </li>
                <li>
                    <code>processProtoFiles&lt;sourceSet&gt;</code>
                    — copies proto files to the workspace directory
                    <br/>
                    <br/>
                    Type: <code>kotlinx.rpc.proto.ProcessProtoFiles</code>
                </li>
                <li>
                    <code>processProtoFilesImport&lt;sourceSet&gt;</code>
                    — copies import proto files to the workspace directory
                    <br/>
                    <br/>
                    Type: <code>kotlinx.rpc.proto.ProcessProtoFiles</code>
                </li>
                <li>
                    <code>bufGenerate&lt;sourceSet&gt;</code>
                    — runs <code>buf generate</code> command.
                    <br/>
                    <br/>
                    Type: <code>kotlinx.rpc.buf.tasks.BufGenerateTask</code>
                </li>
            </list>
            <p>
                To configure Buf, use the <code>buf</code> block:
            </p>
            <code-block lang="Kotlin">
                rpc {
                    grpc {
                        buf {
                            // Configure Buf
                            logFormat = BufExtenstion.LogFormat.Text
                            timeout = 60.seconds

                            generate {
                                // Configure Buf generate

                                includeImports = false
                                includeWkt = false
                                errorFormat = BufGenerateExtenstion.ErrorFormat.Text
                            }
                        }
                    }
                }
            </code-block>
            <p>
                General configuration options:
            </p>
            <deflist>
                <def title="logFormat" id="logFormat">
                    <a href="https://buf.build/docs/reference/cli/buf/#log-format">logFormat</a>
                    — either <code>Text</code>, <code>Color</code>, <code>Json</code> or <code>Default</code>
                </def>
                <def title="timeout" id="timeout">
                    <a href="https://buf.build/docs/reference/cli/buf/#timeout">timeout</a>
                    — timeout for the <code>buf</code> commands, always converted to whole seconds
                </def>
                <def title="--debug" id="debug">
                    Running Gradle with <code>--debug</code> enables Buf's <code>--debug</code> option as well.
                </def>
            </deflist>
            <p>
                <code>buf generate</code> configuration options:
            </p>
            <deflist>
                <def title="includeImports" id="generate_includeImports">
                    <a href="https://buf.build/docs/reference/cli/buf/generate/#include-imports">includeImports</a>
                    — <code>true</code> or <code>false</code>
                </def>
                <def title="includeWkt" id="generate_includeWkt">
                    <a href="https://buf.build/docs/reference/cli/buf/generate/#include-wkt">includeWkt</a>
                    — <code>true</code> or <code>false</code>
                </def>
                <def title="errorFormat" id="generate_errorFormat">
                    <a href="https://buf.build/docs/reference/cli/buf/generate/#error-format">errorFormat</a>
                    — either <code>Text</code>, <code>Json</code>, <code>Msvs</code>,
                    <code>Junit</code>, <code>GithubActions</code> or <code>Default</code>
                </def>
            </deflist>
        </chapter>
        <chapter title="Custom tasks" id="buf-custom-tasks">
            <p>
                Currently, we only support <code>generate</code> tasks.
                However, because of Buf's capabilities for managing <path>.proto</path> files,
                like linting and detection of breaking changes,
                we provide a way to create custom Buf tasks.
            </p>
            <p>
                To create a custom task, extend the <code>kotlinx.rpc.buf.tasks.BufExecTask</code> class.
                You don't need to define a <code>@TaskAction</code>; just a set of arguments and a command to execute.
            </p>
            <p>
                You can register the task in two ways:
            </p>
            <list>
                <li>
                    <p>A workspace task (recommended):</p>
                    <code-block lang="Kotlin">
                        rpc.grpc.buf.tasks {
                            val provider = registerWorkspaceTask&lt;MyBufLintTask&gt;("lint") {
                                // configure task here
                            }

                            // bufLintMain, or bufLintJvmMain for KMP projects
                            provider.mainTask

                            // bufLintTest, or bufLintJvmTest for KMP projects
                            provider.testTask
                        }
                    </code-block>
                    <p>
                        These tasks can be executed on a generated workspace for all proto source sets.
                    </p>
                    <note>
                        These tasks are not plugged into the Gradle build cycle,
                        so you must run them manually
                    </note>
                </li>
                <li>
                    <p>A regular task:</p>
                    <code-block lang="Kotlin">
                        project.registerBufExecTask&lt;MyBufLintTask&gt;(
                            name = "bufLint",
                            workingDir = workingDirProvider,
                        ) {
                            // configure task here
                        }
                    </code-block>
                    <p>
                        It is a standard Gradle task that has access to the Buf's executable
                        and some predefined properties.
                    </p>
                </li>
            </list>
        </chapter>
    </chapter>
</topic>
