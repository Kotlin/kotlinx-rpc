<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Configuration" id="grpc-configuration">

    <tldr>
        <p>
            Artifacts for gRPC integration are published <a href="https://public.jetbrains.space/p/krpc/packages/maven/grpc">separately</a>
            and updated frequently, independent of the main releases.
        </p>
        <p>
            <a href="https://maven.pkg.jetbrains.space/public/p/krpc/grpc">
                <img alt="Latest dev version"
                     src="https://img.shields.io/badge/dynamic/xml?url=https%3A%2F%2Fmaven.pkg.jetbrains.space%2Fpublic%2Fp%2Fkrpc%2Fgrpc%2Forg%2Fjetbrains%2Fkotlinx%2Fkotlinx-rpc-core%2Fmaven-metadata.xml&amp;query=%2F%2Fmetadata%2Fversioning%2Flatest&amp;label=Latest%20dev%20version&amp;color=forest-green&amp;cacheSeconds=60"/>
            </a>
        </p>
    </tldr>

    <p>
        <a href="https://grpc.io">gRPC</a> integration is available in an experimental state.
        The artifacts are published separately in our <a
            href="https://public.jetbrains.space/p/krpc/packages/maven/grpc">Space repository</a>.
    </p>
    <chapter title="Dependencies configuration" id="dependencies-configuration">
        <p>Below is an example of a project setup.</p>
        <code>settings.gradle.kts</code>:
        <code-block lang="Kotlin">
            pluginManagement {
                repositories {
                    gradlePluginPortal()
                    mavenCentral()
                    maven("https://maven.pkg.jetbrains.space/public/p/krpc/grpc")
                }
            }
        </code-block>
        <p>
            <code>build.gradle.kts</code>:
        </p>
        <code-block lang="Kotlin">
           plugins {
               kotlin("jvm") version "%kotlin-version%"
               kotlin("plugin.serialization") version "%kotlin-version%"
               id("org.jetbrains.kotlinx.rpc.plugin") version "&lt;version&gt;"
               id("com.google.protobuf") version "0.9.4"
           }

           repositories {
               mavenCentral()
               maven("https://maven.pkg.jetbrains.space/public/p/krpc/grpc")
           }

           dependencies {
               implementation("org.jetbrains.kotlinx:kotlinx-rpc-grpc-core:&lt;version&gt;")
               implementation("ch.qos.logback:logback-classic:1.5.16")
               implementation("io.grpc:grpc-netty:1.69.0")
           }
        </code-block>
        <p>Here <code>&lt;version&gt;</code> comes from the badge above.</p>
        <warning>
            The setup has only been tested on <code>Kotlin/JVM</code> projects.
        </warning>
    </chapter>
    <chapter title="Protoc setup" id="protoc-setup">
        <p>
            gRPC requires additional code generation from the <a href="https://github.com/google/protobuf-gradle-plugin">protoc</a>
            compiler.
            It is set up automatically for you when the <code>com.google.protobuf</code>
            plugin is present in the project.
        </p>
        <p>
            We provide additional options for configuration:
        </p>
        <code-block lang="Kotlin">
            rpc {
                grpc {
                    // Enforce additional checks on the project configuration
                    enabled = true

                    // Quick access to a `Locator` and `Options`
                    // for the kotlinx-rpc Protobuf plugin
                    plugin {
                        options {
                            // Add or modify options
                            option("debugOutput=myFile.txt")
                        }

                        locator {
                            // Override artifact coordinates
                            artifact = "some-other:artifact:version"
                        }
                    }

                    // same as `plugin`, but for gRPC Java generation
                    grpcJavaPlugin { ... }
                    // same as `plugin`, but for gRPC Kotlin generation
                    grpcKotlinPlugin { ... }

                    // access `generateProto` tasks
                    tasks {
                        plugins {
                            create("python")
                        }
                    }

                    // access `generateProto` tasks with a filter
                    tasksMatching { it.isTest }.all {
                        plugins {
                            create("cpp")
                        }
                    }
                }
            }
        </code-block>
        <p>
            You can still use <code>protobuf</code> extension to access the configuration.
            The following is the equivalent for the above code using the <code>protobuf</code> extension:
        </p>
        <code-block lang="Kotlin">
            protobuf {
                plugins {
                    named(GrpcExtension.LOCATOR_NAME) {
                        artifact = "some-other:artifact:version"
                    }

                    named(GrpcExtension.GRPC_JAVA_LOCATOR_NAME) { ... }
                    named(GrpcExtension.GRPC_KOTLIN_LOCATOR_NAME) { ... }
                }

                generateProtoTasks {
                    all().all {
                        plugins {
                            named(GrpcExtension.LOCATOR_NAME) {
                                option("debugOutput=myFile.txt")
                            }

                            create("python")

                            if (isTest) {
                                create("cpp")
                            }
                        }
                    }
                }
            }
        </code-block>
        <p>
            The minimum recommended configuration looks like this:
        </p>
        <code-block lang="Kotlin">
            rpc {
                grpc {
                    enabled = true
                }
            }
        </code-block>
        <p>
            By default, four source sets will be generated:
        </p>
        <list>
            <li><code>java</code> - protobuf Java declarations</li>
            <li><code>grpc</code> - gRPC Java declarations</li>
            <li><code>grpckt</code> - gRPC Kotlin wrappers for Java</li>
            <li><code>kotlinx-rpc</code> - our wrappers for all of the above</li>
        </list>
        <p>
            Only the declarations from the <code>kotlinx-rpc</code> source set are intended to be used.
        </p>
        <p>
            Source sets are generated into the <code>$BUILD_DIR/generated/source/proto/main</code> directory
            unless specified otherwise.
        </p>
    </chapter>
</topic>
