<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Copyright 2023-2025 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.
  -->

<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Strict mode" id="strict-mode">

    <p>
        Starting with version <code>0.5.0</code>, the library introduced major changes to the service APIs.
        The following declarations are now restricted:
    </p>
    <warning>
        Strict mode is enforced irreversibly since <code>0.8.0</code>.
    </warning>
    <chapter title="StateFlow and SharedFlow" id="stateflow-and-sharedflow">
        <p>Deprecation level: <code>ERROR</code></p>
        <code-block lang="kotlin">
            @Rpc
            interface Service {
                suspend fun old(): StateFlow&lt;Int&gt; // deprecated

                suspend fun new(): Flow&lt;Int&gt; // use .stateIn on the client side
            }
        </code-block>
    </chapter>

    <chapter title="Fields" id="fields">
        <p>Deprecation level: <code>ERROR</code></p>
        <code-block lang="kotlin">
            @Rpc
            interface Service {
                val old: Flow&lt;Int&gt; // deprecated

                suspend fun new(): Flow&lt;Int&gt; // store flow locally
            }
        </code-block>
    </chapter>
    <chapter title="Nested Flows" id="nested-flows">
        <p>Deprecation level: <code>ERROR</code></p>
        <code-block lang="kotlin">
            @Rpc
            interface Service {
                suspend fun old(): Flow&lt;Flow&lt;Int&gt;&gt; // deprecated

                // no particular alternative, depends on the use case
            }
        </code-block>
    </chapter>
    <chapter title="Not top-level server flows" id="not-top-level-server-flows">
        <p>Deprecation level: <code>ERROR</code></p>

        <code-block lang="kotlin">
            data class SpotifyWrapped(val myMusicFlow: Flow&lt;Rap&gt;, val extra: Data)

            @Rpc
            interface Service {
                suspend fun old(): SpotifyWrapped // deprecated

                // one should consider message delivery order when calling these
                suspend fun new(): Flow&lt;Rap&gt;
                suspend fun getData(): Data
            }
        </code-block>
    </chapter>
    <chapter title="Non-suspending server flows" id="non-suspending-server-flows">
        <p>Deprecation level: <code>ERROR</code></p>

        <code-block lang="kotlin">
            data class SpotifyWrapped(val extra: Data)

            @Rpc
            interface Service {
                suspend fun old(): Flow&lt;SpotifyWrapped&gt; // deprecated

                fun new(): Flow&lt;SpotifyWrapped&gt;
            }
        </code-block>
    </chapter>
    <chapter title="Stream scopes management" id="stream-scopes-management">
        <p>Deprecation level: <code>ERROR</code></p>

        <p>
            The next stream scope management structures are deprecated due to the introduction of
            non-suspending server flows:
        </p>
        <list>
            <li><code>StreamScoped</code> class and function</li>
            <li><code>streamScoped</code> function</li>
            <li><code>invokeOnStreamScopeCompletion</code> function</li>
            <li><code>withStreamScope</code> function</li>
        </list>
        <p>
            Stream collection and completion is now bound to the <code>CoroutineScope</code> in which the flow was
            collected (server-side flows) or produced (client-side flows).
        </p>
        <p>
            0.5.x:
        </p>
        <code-block lang="kotlin">
            @Rpc
            interface Service {
                suspend fun oldClient(flow: Flow&lt;Int&gt;)
                suspend fun oldServer(): Flow&lt;Int&gt;
            }

            suspend fun consumer(service: Service) {
                streamScoped {
                    service.oldClient(flow { /* ... */ })

                    service.oldServer().collect {
                        // ...
                    }
                }
            }
        </code-block>
        <p>
            0.6.x:
        </p>
        <code-block lang="kotlin">
            @Rpc
            interface Service {
                suspend fun newClient(flow: Flow&lt;Int&gt;)
                fun newServer(): Flow&lt;Int&gt;
            }

            fun consumer(service: Service, scope: CoroutineScope) {
                val flow = service.newServer()
                scope.launch {
                    service.newClient(flow { /* ... */ })

                    flow.collect {
                        // ...
                    }
                }
            }

            // or
            suspend fun consumer(service: Service) {
                service.newClient(flow { /* ... */ })

                service.newServer().collect {
                    // ...
                }
            }
        </code-block>
    </chapter>
</topic>
