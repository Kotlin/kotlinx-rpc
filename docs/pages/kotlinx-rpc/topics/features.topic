<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Copyright 2023-2025 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.
  -->

<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Features" id="features">
    <chapter title="Send and receive Flows" id="send-and-receive-flows">
        <p>
            You can send and receive <a href="https://kotlinlang.org/docs/flow.html">Kotlin Flows</a> in RPC
            methods.
            However, this only applies to the <code>Flow</code> type. <code>StateFlow</code> and <code>SharedFlow</code>
            are not supported, and there are no plans to add support for them.
        </p>

        <code-block lang="kotlin">
            @Serializable
            data class StreamRequest(
                @Contextual
                val innerFlow: Flow&lt;Int&gt;
            )

            @Rpc
            interface MyService {
                fun sendStream(stream: Flow&lt;Int&gt;): Flow&lt;String&gt;

                suspend fun streamRequest(request: StreamRequest)
            }
        </code-block>

        <p>
            Another requirement is that server-side steaming (flows that are returned from a function),
            must be the top-level type and the function must be non-suspending:
        </p>

        <code-block lang="kotlin">
            @Serializable
            data class StreamResult(
                @Contextual
                val innerFlow: Flow&lt;Int&gt;
            )

            @Rpc
            interface MyService {
                fun serverStream(): Flow&lt;String&gt; // ok
                suspend fun serverStream(): Flow&lt;String&gt; // not ok
                suspend fun serverStream(): StreamResult // not ok
            }
        </code-block>

        <note>
            Note that flows that are declared in classes (like in <code>StreamRequest</code>) require a
            <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serializers.md#contextual-serialization">Contextual</a>
            annotation.
        </note>
    </chapter>
</topic>
