<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Copyright 2023-2024 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.
  -->

<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Features" id="features">
    <chapter title="Send and receive Flows" id="send-and-receive-flows">
        <p>
            You can send and receive <a href="https://kotlinlang.org/docs/flow.html">Kotlin Flows</a> in RPC
            methods.
            However, this only applies to the <code>Flow</code> type. <code>StateFlow</code> and <code>SharedFlow</code>
            are not supported, and there are no plans to add support for them.
        </p>

        <code-block lang="kotlin">
            @Serializable
            data class StreamRequest(
                @Contextual
                val innerFlow: Flow&lt;Int&gt;
            )

            @Rpc
            interface MyService : RemoteService {
                suspend fun sendStream(stream: Flow&lt;Int&gt;): Flow&lt;String&gt;

                suspend fun streamRequest(request: StreamRequest)
            }
        </code-block>

        <p>
            Another requirement is that server-side steaming (flows that are returned from a function),
            must be the top-level type:
        </p>

        <code-block lang="kotlin">
            @Serializable
            data class StreamResult(
                @Contextual
                val innerFlow: Flow&lt;Int&gt;
            )

            @Rpc
            interface MyService : RemoteService {
                suspend fun serverStream(): Flow&lt;String&gt; // ok
                suspend fun serverStream(): StreamResult // not ok
            }
        </code-block>

        <note>
            Note that flows that are declared in classes (like in <code>StreamResult</code>) require a
            <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serializers.md#contextual-serialization">Contextual</a>
            annotation.
        </note>

        <p>
            To use flows in your code, use the <code>streamScoped</code> function
            that will provide your flows with their lifetime:
        </p>

        <code-block lang="kotlin">
            @Rpc
            interface MyService : RemoteService {
                suspend fun sendFlow(flow: Flow&lt;Int&gt;)
            }

            val myService = rpcClient.withService&lt;MyService&gt;()

            streamScoped {
                val flow = flow {
                    repeat(10) { i -&gt;
                        emit(i)
                    }
                }

                myService.sendFlow(flow)
            }
        </code-block>
        <p>
            In that case all your flows, including incoming and outgoing,
            will work until the <code>streamScoped</code> function completes.
            After that, all streams that are still live will be closed.
        </p>
        <p>
            You can have multiple RPC calls and flows inside the <code>streamScoped</code> function, including those from
            different services.
        </p>
        <p>
            On the server side, you can use the <code>invokeOnStreamScopeCompletion</code> handler inside your methods
            to execute code after <code>streamScoped</code> on the client side has closed.
            It might be useful to clean resources, for example.
        </p>
        <warning>
            Note that this API is experimental and may be removed in future releases.
        </warning>
        <p>
            Another way of managing streams is to do it manually.
            For this, you can use the <code>StreamScope</code> constructor function together with
            <code>withStreamScope</code>:
        </p>
        <code-block lang="kotlin">
            val streamScope = StreamScope(myJob)
            withStreamScope(streamScope) {
                // use streams here
            }
        </code-block>
    </chapter>
</topic>
