<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Copyright 2023-2024 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.
  -->

<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="RPC Clients" id="rpc-clients">
    <p>
        For each declared service, <code>kotlinx.rpc</code> will generate an actual client implementation
        that can be used to send requests to a server. This generated instance is
        commonly called a stub in RPC.
    </p>
    <tip>
        Note that we talk about generated stubs (service interface implementations on the client side)
        that must not be called directly.
        There might be a case when the generated code is not a stub, but a service declaration itself
        (for example, the services generated from
        <a href="https://grpc.io/docs/what-is-grpc/core-concepts/#service-definition">.proto files</a>).
        In this case, you can use the generated code.
        See <a href="grpc-services.topic"/>.
    </tip>
    <p>
        To be able to get an instance of your service, you need to have an <code>RpcClient</code>.
        You can call the <code>withService()</code> method on your client:
    </p>
    <code-block lang="kotlin">
        val rpcClient: RpcClient

        val myService: MyService = rpcClient.withService&lt;MyService&gt;()
    </code-block>
    <tip>
        Note that the type parameter of <code>withService</code> must be annotated with <code>@Rpc</code> annotation.
    </tip>
    <p>
        Now you have your client instance that is able to send RPC requests to your server.
        <code>RpcClient</code> can have multiple services that communicate through it.
        Conceptually, <code>RpcClient</code> is an abstraction of a client,
        that is able to convent service requests
        (represented by the <code>RpcCall</code> class)
        into actual network requests.
    </p>
    <p>
        You can provide your own implementations of the <code>RpcClient</code>.
        But <code>kotlinx.rpc</code> already provides one out-of-the-box solution that uses
        in-house RPC protocol (called <a href="krpc-client.topic">kRPC</a>), and we are working on supporting more
        protocols (see <a href="grpc-configuration.topic"/>).
    </p>
</topic>
