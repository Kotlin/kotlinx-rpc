<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Copyright 2023-2024 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.
  -->

<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="RPC Clients" id="rpc-clients">
     <p>
         For each declared service, <code>kotlinx.rpc</code> will generate an actual client implementation
         that can be used to send requests to a server. You must not use generated code directly. Instead,
         you should use the APIs that will provide you with the instance of your interface. This generated instance is
         commonly called a stub in RPC.
     </p>
    <tip>
        Note that we talk about generated stubs (service implementations on the client side)
            that must not be called directly.
            There might be a case when the generated code is not a stub, but a service declaration itself
            (for example, the services generated from
            <a href="https://grpc.io/docs/what-is-grpc/core-concepts/#service-definition">.proto files</a>).
            In this case, you can use the generated code.
    </tip>
    <p>
        To be able to obtain an instance of your service, you need to have an <code>RPCClient</code>.
        You can call the <code>withService()</code> method on your client:
    </p>
    <code-block lang="kotlin">
        val rpcClient: RPCClient

        val myService: MyService = rpcClient.withService&lt;MyService&gt;()
    </code-block>
    <p>
        Now you have your client instance that is able to send RPC requests to your server.
        <code>RPCClient</code> can have multiple services that communicate through it.
        Conceptually, <code>RPCClient</code> is an abstraction of a client,
        that is able to convent service requests
        (represented by <code>RPCCall</code> and <code>RPCField</code> classes)
        into actual network requests.
    </p>
    <p>
        You can provide your own implementations of the <code>RPCClient</code>.
        But <code>kotlinx.rpc</code> already provides one out-of-the-box solution that uses
        in-house RPC protocol (called kRPC), and we are working on supporting more protocols
        (with priority on gRPC).
    </p>

    <chapter title="KRPCClient â€” RPCClient for kRPC Protocol" id="krpcclient-rpcclient-for-krpc-protocol">
        <p><code>KRPCClient</code> is an abstract class that implements <code>RPCClient</code> and kRPC protocol
            logic.
            The only thing required to be implemented is the transporting of the raw data.
            Abstract transport is represented by <code>RPCTransport</code> interface.</p>
        <p>To implement your own <code>RPCTransport</code>
            you need to be able to transfer strings and/or raw bytes (Kotlin's <code>ByteArray</code>).
            Additionally, the library will provide you with <a href="transport.topic">integrations with different
            libraries</a> that are used to work with the network.
        </p>
        <p>See below an example usage of kRPC with a custom transport:</p>

        <code-block lang="kotlin">
            class MySimpleRPCTransport : RPCTransport {
                val outChannel = Channel&lt;RPCTransportMessage&gt;()
                val inChannel = Channel&lt;RPCTransportMessage&gt;()

                override val coroutineContext: CoroutineContext = Job()

                override suspend fun send(message: RPCTransportMessage) {
                    outChannel.send(message)
                }

                override suspend fun receive(): RPCTransportMessage {
                    return inChannel.receive()
                }
            }

            class MySimpleRPCClient : KRPCClient(rpcClientConfig(), MySimpleRPCTransport())

            val client = MySimpleRPCClient()
            val service: MyService = client.withService&lt;MyService&gt;()
        </code-block>
    </chapter>
</topic>