<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Copyright 2023-2025 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.
  -->

<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Server" id="krpc-server">

    <chapter title="KrpcServer" id="krpc-server">
        <p>
            <code>KrpcServer</code> abstract class implements <code>RpcServer</code>
            and all the logic for processing RPC messages
            and again leaves <code>KrpcTransport</code> methods for the specific implementations
            (see <a href="transport.topic">transports</a>).
        </p>

        <p>
            Example usage with custom transport:
        </p>

        <code-block lang="kotlin">
            // same MySimpleRpcTransport as in the client example above
            class MySimpleRpcServer : KrpcServer(rpcServerConfig(), MySimpleRpcTransport())

            val server = MySimpleRpcServer()
            server.registerService&lt;MyService&gt; { MyServiceImpl() }
        </code-block>
        <note>
            <p>
                Note that here we pass explicit <code>MyService</code> type parameter to the <code>registerService</code>
                method.
                You must explicitly specify the type of the service interface here,
                otherwise the server service will not be found.
            </p>
            <p>
                See <a href="annotation-type-safety.topic"/> for more details.
            </p>
        </note>
    </chapter>
</topic>
