<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Annotation type-safety" id="annotation-type-safety">

    <p>
        Library introduces a concept of annotation type-safety. Consider the following example:
    </p>
    <code-block lang="Kotlin">
        @Rpc
        interface MyService : RemoteService

        class MyServiceImpl : MyService

        fun &lt;T : RemoteService&gt; withService() {}
    </code-block>
    <p>
        Compiler can not guarantee, that the passed type is the one for which the code generation was run:
    </p>
    <code-block lang="Kotlin">
        withService&lt;MyService&gt;() // ok
        withService&lt;MyServiceImpl&gt;() // compile time ok, runtime throws
    </code-block>
    <p>
        Our compiler plugin, however, can make this code behave as expected.
    </p>
    <code-block lang="Kotlin">
        @Rpc
        interface MyService : RemoteService

        class MyServiceImpl : MyService

        fun &lt;@Rpc T : Any&gt; withService() {}
    </code-block>

    <code-block lang="Kotlin">
        withService&lt;MyService&gt;() // ok
        withService&lt;MyServiceImpl&gt;() // compile time error
    </code-block>

    <note>
        Annotation type safety only ensures that the resolved type parameters are annotated with the required annotation.
        The actual type of the passed argument may differ:
        <code-block lang="Kotlin">
            fun &lt;@Rpc T : Any&gt; registerService(body: () -> T) {}

            // ok, T is resolved to MyService,
            // but 'body' parameter returns MyServiceImpl
            registerService&lt;MyService&gt; { ctx -> MyServiceImpl(ctx) }

            // error, T is resolved to MyServiceImpl
            registerService { ctx -> MyServiceImpl(ctx) }
        </code-block>
    </note>

    <warning>
        The feature is highly experimental.
        The concept will stay, however due to the complexity of the implementation,
        our compiler plugin may behave unexpectedly when performing type-safety checks.
        Please, <a href="https://github.com/Kotlin/kotlinx-rpc/issues/new?template=bug_report.md">report</a> any encountered bugs.

        To ensure critical bugs don't paralyze your app, there is a kill-switch present for the feature:
        <code-block lang="Kotlin">
            // build.gradle.kts
            rpc {
                annotationTypeSafetyEnabled = false // true by default
            }
        </code-block>
    </warning>
</topic>
