<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Copyright 2023-2024 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.
  -->

<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="RPC Servers" id="rpc-servers">
    <p>
        <code>RpcServer</code> interface represents an RPC server,
        that accepts RPC messages and may contain multiple services to route to.
        <code>RpcServer</code> uses data from incoming RPC messages
        and routes it to the designated service and sends service's response back to the corresponding client.
    </p>
    <p>
        You can provide your own <code>RpcServer</code> implementation
        or use the one provided out of the box.
        Note that client and server must use the same RPC protocol to communicate.
    </p>
    <p>
        Use <code>registerService</code> function to add your own factory for implemented RPC services:
    </p>

    <code-block lang="kotlin">
        val server: RpcServer

        server.registerService&lt;MyService&gt; { MyServiceImpl() }
    </code-block>
    <note>
        <p>
            The <code>registerService</code> function requires the explicit type of the declared RPC service.
            That means that the code will not work if you provide it with the type of the service implementation:
        </p>

        <code-block lang="kotlin">
            // Wrong! Should be `MyService` as type argument
            server.registerService&lt;MyServiceImpl&gt; { MyServiceImpl() }
        </code-block>

        <p>
            See <a href="annotation-type-safety.topic"/> for more details.
        </p>
    </note>
</topic>
