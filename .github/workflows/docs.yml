name: Build docs website

on:
  pull_request:
    paths:
      - 'docs/pages/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      build_id:
        description: 'Id of TeamCity build that produced the Dokka artifact.'
        required: true
      dry_run:
        type: boolean
        description: "Dry run. If set to true, the action will not actually publish the pages, but will assemble the artifact."
        default: true
        required: true

permissions:
  id-token: write
  pages: write
  contents: read

env:
  INSTANCE: 'kotlinx-rpc/rpc'
  ARTIFACT: 'webHelpRPC2-all.zip'
  DOCKER_VERSION: '243.22562'
  ALGOLIA_ARTIFACT: 'algolia-indexes-RPC.zip'
  ALGOLIA_APP_NAME: 'MMA5Z3JT91'
  ALGOLIA_INDEX_NAME: 'prod_kotlin_rpc'
  ALGOLIA_KEY: '${{ secrets.ALGOLIA_KEY }}'
  CONFIG_JSON_PRODUCT: 'kotlinx-rpc'
  CONFIG_JSON_VERSION: '0.10.0'
  DOKKA_ARTIFACT: 'dokka.zip'
  ASSEMBLE_DIR: '__docs_assembled'
  ASSEMBLE_ARTIFACT: 'assembled.zip'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Build docs using Writerside Docker builder
        uses: JetBrains/writerside-github-action@v4
        with:
          instance: ${{ env.INSTANCE }}
          artifact: ${{ env.ARTIFACT }}
          docker-version: ${{ env.DOCKER_VERSION }}
          location: docs/pages/kotlinx-rpc/

      - name: Save artifact with build results
        uses: actions/upload-artifact@v5
        with:
          name: kotlinx-rpc
          path: |
            artifacts/${{ env.ARTIFACT }}
            artifacts/report.json
            artifacts/${{ env.ALGOLIA_ARTIFACT }}
          retention-days: 7

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v6
        with:
          name: kotlinx-rpc
          path: artifacts

      - name: Test documentation
        uses: JetBrains/writerside-checker-action@v1
        with:
          instance: ${{ env.INSTANCE }}

  assemble:
    if: github.event_name == 'workflow_dispatch'
    needs: [ build, test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download Writerside artifacts
        uses: actions/download-artifact@v6
        with:
          name: kotlinx-rpc

      - name: Unzip Writerside artifacts
        run: unzip -O UTF-8 -qq '${{ env.ARTIFACT }}' -d ${{ env.ASSEMBLE_DIR }}

      - name: Download Dokka
        run: |
          if [ -z "${{ inputs.build_id }}" ]; then
            echo "'build_id' is not set"
            exit 1
          fi
          
          echo "Downloading Dokka artifact, build id: ${{ inputs.build_id }}"

          artifact_url="https://krpc.teamcity.com/app/rest/builds/id:${{ inputs.build_id }}/artifacts/content/${{ env.DOKKA_ARTIFACT }}"
          echo "Downloading Dokka artifact from URL: $artifact_url"

          curl -v -s -f -L -H "Authorization: Bearer ${{ secrets.TEAMCITY_TOKEN }}" "$artifact_url" -o "${{ env.DOKKA_ARTIFACT }}"
          
          if [ -z "$(ls | grep -x ${{ env.DOKKA_ARTIFACT }})" ]; then
            echo "Failed to download Dokka artifact, asset id: ${{ inputs.build_id }}"
            exit 1
          fi

      - name: Unzip Dokka
        run: unzip -O UTF-8 -qq '${{ env.DOKKA_ARTIFACT }}' -d ${{ env.ASSEMBLE_DIR }}/api

      - name: Update sitemap.xml
        run: chmod +x updateSitemap.sh && ./updateSitemap.sh ${{ env.ASSEMBLE_DIR }}/sitemap.xml ${{ env.ASSEMBLE_DIR }}/api

      - name: Assemble file
        run: cd ${{ env.ASSEMBLE_DIR }} && zip -r ../${{ env.ASSEMBLE_ARTIFACT }} .

      - name: Save assembled artifact
        uses: actions/upload-artifact@v5
        with:
          name: kotlinx-rpc-assembled
          path: |
            ${{ env.ASSEMBLE_ARTIFACT }}
          retention-days: 7

  deploy:
    if: github.event_name == 'workflow_dispatch' && !inputs.dry_run
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: [ build, test, assemble ]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v6
        with:
          name: kotlinx-rpc-assembled

      - name: Unzip artifact
        run: unzip -O UTF-8 -qq '${{ env.ASSEMBLE_ARTIFACT }}' -d publish

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Package and upload Pages artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: publish

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  publish-indexes:
    if: github.event_name == 'workflow_dispatch' && !inputs.dry_run
    needs: [ build, test, assemble, deploy ]
    runs-on: ubuntu-latest
    container:
      image: registry.jetbrains.team/p/writerside/builder/algolia-publisher:2.0.32-3
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v6
        with:
          name: kotlinx-rpc
      - name: Unzip artifact
        run: |
          unzip -O UTF-8 -qq '${{ env.ALGOLIA_ARTIFACT }}' -d algolia-indexes
          env algolia-key='${{env.ALGOLIA_KEY}}' java -jar /opt/builder/help-publication-agent.jar \
          update-index \
          --application-name '${{env.ALGOLIA_APP_NAME}}' \
          --index-name '${{env.ALGOLIA_INDEX_NAME}}' \
          --product '${{env.CONFIG_JSON_PRODUCT}}' \
          --version '${{env.CONFIG_JSON_VERSION}}' \
          --index-directory algolia-indexes/ \
          2>&1 | tee algolia-update-index-log.txt
