public abstract interface class org/jetbrains/krpc/RPC : kotlinx/coroutines/CoroutineScope {
}

public final class org/jetbrains/krpc/RPCCall {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Lorg/jetbrains/krpc/RPCCall$Type;Ljava/lang/Object;Lkotlin/reflect/KType;Lkotlin/reflect/KType;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Lorg/jetbrains/krpc/RPCCall$Type;
	public final fun component4 ()Ljava/lang/Object;
	public final fun component5 ()Lkotlin/reflect/KType;
	public final fun component6 ()Lkotlin/reflect/KType;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;Lorg/jetbrains/krpc/RPCCall$Type;Ljava/lang/Object;Lkotlin/reflect/KType;Lkotlin/reflect/KType;)Lorg/jetbrains/krpc/RPCCall;
	public static synthetic fun copy$default (Lorg/jetbrains/krpc/RPCCall;Ljava/lang/String;Ljava/lang/String;Lorg/jetbrains/krpc/RPCCall$Type;Ljava/lang/Object;Lkotlin/reflect/KType;Lkotlin/reflect/KType;ILjava/lang/Object;)Lorg/jetbrains/krpc/RPCCall;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCallableName ()Ljava/lang/String;
	public final fun getData ()Ljava/lang/Object;
	public final fun getDataType ()Lkotlin/reflect/KType;
	public final fun getReturnType ()Lkotlin/reflect/KType;
	public final fun getServiceTypeString ()Ljava/lang/String;
	public final fun getType ()Lorg/jetbrains/krpc/RPCCall$Type;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class org/jetbrains/krpc/RPCCall$Type : java/lang/Enum {
	public static final field Field Lorg/jetbrains/krpc/RPCCall$Type;
	public static final field Method Lorg/jetbrains/krpc/RPCCall$Type;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lorg/jetbrains/krpc/RPCCall$Type;
	public static fun values ()[Lorg/jetbrains/krpc/RPCCall$Type;
}

public abstract interface class org/jetbrains/krpc/RPCClient : kotlinx/coroutines/CoroutineScope {
	public abstract fun call (Lorg/jetbrains/krpc/RPCCall;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun registerPlainFlowField (Lorg/jetbrains/krpc/RPCField;)Lkotlinx/coroutines/flow/Flow;
	public abstract fun registerSharedFlowField (Lorg/jetbrains/krpc/RPCField;)Lkotlinx/coroutines/flow/SharedFlow;
	public abstract fun registerStateFlowField (Lorg/jetbrains/krpc/RPCField;)Lkotlinx/coroutines/flow/StateFlow;
}

public abstract interface class org/jetbrains/krpc/RPCConfig {
	public abstract fun getSerialFormatInitializer ()Lorg/jetbrains/krpc/serialization/RPCSerialFormatBuilder;
	public abstract fun getSharedFlowBuilder ()Lkotlin/jvm/functions/Function0;
	public abstract fun getWaitForServices ()Z
}

public final class org/jetbrains/krpc/RPCConfig$Client : org/jetbrains/krpc/RPCConfig {
	public fun getSerialFormatInitializer ()Lorg/jetbrains/krpc/serialization/RPCSerialFormatBuilder;
	public fun getSharedFlowBuilder ()Lkotlin/jvm/functions/Function0;
	public fun getWaitForServices ()Z
}

public final class org/jetbrains/krpc/RPCConfig$Server : org/jetbrains/krpc/RPCConfig {
	public fun getSerialFormatInitializer ()Lorg/jetbrains/krpc/serialization/RPCSerialFormatBuilder;
	public fun getSharedFlowBuilder ()Lkotlin/jvm/functions/Function0;
	public fun getWaitForServices ()Z
}

public abstract class org/jetbrains/krpc/RPCConfigBuilder {
	protected final fun getSharedFlowBuilder ()Lkotlin/jvm/functions/Function0;
	public final fun getWaitForServices ()Z
	protected final fun rpcSerialFormat ()Lorg/jetbrains/krpc/serialization/RPCSerialFormatBuilder;
	public final fun serialization (Lkotlin/jvm/functions/Function1;)V
	protected final fun setSharedFlowBuilder (Lkotlin/jvm/functions/Function0;)V
	public final fun setWaitForServices (Z)V
	public final fun sharedFlowParameters (Lkotlin/jvm/functions/Function1;)V
}

public final class org/jetbrains/krpc/RPCConfigBuilder$Client : org/jetbrains/krpc/RPCConfigBuilder {
	public fun <init> ()V
	public final fun build ()Lorg/jetbrains/krpc/RPCConfig$Client;
}

public final class org/jetbrains/krpc/RPCConfigBuilder$Server : org/jetbrains/krpc/RPCConfigBuilder {
	public fun <init> ()V
	public final fun build ()Lorg/jetbrains/krpc/RPCConfig$Server;
}

public final class org/jetbrains/krpc/RPCConfigBuilder$SharedFlowParametersBuilder {
	public static final field DEFAULT_EXTRA_BUFFER_CAPACITY I
	public static final field DEFAULT_REPLAY I
	public final fun getExtraBufferCapacity ()I
	public final fun getOnBufferOverflow ()Lkotlinx/coroutines/channels/BufferOverflow;
	public final fun getReplay ()I
	public final fun setExtraBufferCapacity (I)V
	public final fun setOnBufferOverflow (Lkotlinx/coroutines/channels/BufferOverflow;)V
	public final fun setReplay (I)V
}

public final class org/jetbrains/krpc/RPCConfigKt {
	public static final fun rpcClientConfig (Lkotlin/jvm/functions/Function1;)Lorg/jetbrains/krpc/RPCConfig$Client;
	public static synthetic fun rpcClientConfig$default (Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lorg/jetbrains/krpc/RPCConfig$Client;
	public static final fun rpcServerConfig (Lkotlin/jvm/functions/Function1;)Lorg/jetbrains/krpc/RPCConfig$Server;
	public static synthetic fun rpcServerConfig$default (Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lorg/jetbrains/krpc/RPCConfig$Server;
}

public abstract interface annotation class org/jetbrains/krpc/RPCEagerField : java/lang/annotation/Annotation {
}

public final class org/jetbrains/krpc/RPCField {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Lkotlin/reflect/KType;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Lkotlin/reflect/KType;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;Lkotlin/reflect/KType;)Lorg/jetbrains/krpc/RPCField;
	public static synthetic fun copy$default (Lorg/jetbrains/krpc/RPCField;Ljava/lang/String;Ljava/lang/String;Lkotlin/reflect/KType;ILjava/lang/Object;)Lorg/jetbrains/krpc/RPCField;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getName ()Ljava/lang/String;
	public final fun getServiceTypeString ()Ljava/lang/String;
	public final fun getType ()Lkotlin/reflect/KType;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class org/jetbrains/krpc/RPCServer : kotlinx/coroutines/CoroutineScope {
	public abstract fun registerService (Lorg/jetbrains/krpc/RPC;Lkotlin/reflect/KClass;)V
}

public abstract interface class org/jetbrains/krpc/RPCTransport : kotlinx/coroutines/CoroutineScope {
	public abstract fun receive (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun send (Lorg/jetbrains/krpc/RPCTransportMessage;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class org/jetbrains/krpc/RPCTransportMessage {
}

public final class org/jetbrains/krpc/RPCTransportMessage$BinaryMessage : org/jetbrains/krpc/RPCTransportMessage {
	public fun <init> ([B)V
	public final fun getValue ()[B
}

public final class org/jetbrains/krpc/RPCTransportMessage$StringMessage : org/jetbrains/krpc/RPCTransportMessage {
	public fun <init> (Ljava/lang/String;)V
	public final fun getValue ()Ljava/lang/String;
}

public final class org/jetbrains/krpc/internal/ExceptionUtilsKt {
}

public final class org/jetbrains/krpc/internal/ExceptionUtils_jvmKt {
}

public final class org/jetbrains/krpc/internal/ObjectIdKt {
}

public final class org/jetbrains/krpc/internal/ReflectionUtilsKt {
}

public final class org/jetbrains/krpc/internal/ReflectionUtils_jvmKt {
}

public final class org/jetbrains/krpc/internal/SerializationUtilsKt {
}

public final class org/jetbrains/krpc/internal/SerializedException$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lorg/jetbrains/krpc/internal/SerializedException$$serializer;
	public fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lorg/jetbrains/krpc/internal/SerializedException;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Lorg/jetbrains/krpc/internal/SerializedException;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/SerializedException$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/StackElement$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lorg/jetbrains/krpc/internal/StackElement$$serializer;
	public fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lorg/jetbrains/krpc/internal/StackElement;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Lorg/jetbrains/krpc/internal/StackElement;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/StackElement$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/WithRPCClientObject_jvmKt {
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$CallData$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$CallDataBinary$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lorg/jetbrains/krpc/internal/transport/RPCMessage$CallDataBinary$$serializer;
	public fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lorg/jetbrains/krpc/internal/transport/RPCMessage$CallDataBinary;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Lorg/jetbrains/krpc/internal/transport/RPCMessage$CallDataBinary;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$CallDataBinary$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$CallDataString$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lorg/jetbrains/krpc/internal/transport/RPCMessage$CallDataString$$serializer;
	public fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lorg/jetbrains/krpc/internal/transport/RPCMessage$CallDataString;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Lorg/jetbrains/krpc/internal/transport/RPCMessage$CallDataString;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$CallDataString$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$CallException$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lorg/jetbrains/krpc/internal/transport/RPCMessage$CallException$$serializer;
	public fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lorg/jetbrains/krpc/internal/transport/RPCMessage$CallException;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Lorg/jetbrains/krpc/internal/transport/RPCMessage$CallException;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$CallException$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$CallResult$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$CallSuccess$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$CallSuccessBinary$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lorg/jetbrains/krpc/internal/transport/RPCMessage$CallSuccessBinary$$serializer;
	public fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lorg/jetbrains/krpc/internal/transport/RPCMessage$CallSuccessBinary;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Lorg/jetbrains/krpc/internal/transport/RPCMessage$CallSuccessBinary;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$CallSuccessBinary$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$CallSuccessString$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lorg/jetbrains/krpc/internal/transport/RPCMessage$CallSuccessString$$serializer;
	public fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lorg/jetbrains/krpc/internal/transport/RPCMessage$CallSuccessString;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Lorg/jetbrains/krpc/internal/transport/RPCMessage$CallSuccessString;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$CallSuccessString$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$CallType$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$StreamCancel$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lorg/jetbrains/krpc/internal/transport/RPCMessage$StreamCancel$$serializer;
	public fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lorg/jetbrains/krpc/internal/transport/RPCMessage$StreamCancel;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Lorg/jetbrains/krpc/internal/transport/RPCMessage$StreamCancel;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$StreamCancel$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$StreamFinished$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lorg/jetbrains/krpc/internal/transport/RPCMessage$StreamFinished$$serializer;
	public fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lorg/jetbrains/krpc/internal/transport/RPCMessage$StreamFinished;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Lorg/jetbrains/krpc/internal/transport/RPCMessage$StreamFinished;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$StreamFinished$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$StreamMessage$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$StreamMessageBinary$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lorg/jetbrains/krpc/internal/transport/RPCMessage$StreamMessageBinary$$serializer;
	public fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lorg/jetbrains/krpc/internal/transport/RPCMessage$StreamMessageBinary;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Lorg/jetbrains/krpc/internal/transport/RPCMessage$StreamMessageBinary;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$StreamMessageBinary$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$StreamMessageString$$serializer : kotlinx/serialization/internal/GeneratedSerializer {
	public static final field INSTANCE Lorg/jetbrains/krpc/internal/transport/RPCMessage$StreamMessageString$$serializer;
	public fun childSerializers ()[Lkotlinx/serialization/KSerializer;
	public synthetic fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Ljava/lang/Object;
	public fun deserialize (Lkotlinx/serialization/encoding/Decoder;)Lorg/jetbrains/krpc/internal/transport/RPCMessage$StreamMessageString;
	public fun getDescriptor ()Lkotlinx/serialization/descriptors/SerialDescriptor;
	public synthetic fun serialize (Lkotlinx/serialization/encoding/Encoder;Ljava/lang/Object;)V
	public fun serialize (Lkotlinx/serialization/encoding/Encoder;Lorg/jetbrains/krpc/internal/transport/RPCMessage$StreamMessageString;)V
	public fun typeParametersSerializers ()[Lkotlinx/serialization/KSerializer;
}

public final class org/jetbrains/krpc/internal/transport/RPCMessage$StreamMessageString$Companion {
	public final fun serializer ()Lkotlinx/serialization/KSerializer;
}

