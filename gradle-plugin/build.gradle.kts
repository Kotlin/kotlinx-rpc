/*
 * Copyright 2023-2025 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.
 */

import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

/*
 * Copyright 2023-2025 JetBrains s.r.o and contributors. Use of this source code is governed by the Apache 2.0 license.
 */

plugins {
    `kotlin-dsl`
    alias(libs.plugins.conventions.jvm)
    alias(libs.plugins.conventions.gradle.publish)
    alias(libs.plugins.gradle.plugin.publish)
}

group = "org.jetbrains.kotlinx"
version = rootProject.libs.versions.kotlinx.rpc.get()

kotlin {
    explicitApi()

    jvmToolchain(11)
}

tasks.withType<KotlinCompile>().configureEach {
    compilerOptions {
        apiVersion = org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_0
        languageVersion = org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_0
    }
}

dependencies {
    implementation(libs.kotlin.gradle.plugin)

    testImplementation(libs.kotlin.gradle.plugin)
    testImplementation(gradleTestKit())
    testImplementation(platform(libs.junit5.bom))
    testImplementation(libs.kotlin.test.junit5)
    testImplementation(libs.junit5.jupiter)
    testImplementation(libs.junit5.jupiter.api)
    testRuntimeOnly(libs.junit5.platform.launcher)

    testImplementation(libs.logback.classic)
}

tasks.test {
    val forwardOutput: Boolean = (properties.getOrDefault("gradle.test.forward.output", "false")
         as String).toBooleanStrictOrNull() ?: false

    systemProperty("gradle.test.forward.output", forwardOutput)

    useJUnitPlatform()

    val includedBuild = gradle.includedBuild("protoc-gen")
    dependsOn(includedBuild.task(":grpc:publishAllPublicationsToBuildRepoRepository"))
    dependsOn(includedBuild.task(":protobuf:publishAllPublicationsToBuildRepoRepository"))
}

// This block is needed to show plugin tasks on --dry-run
//  and to not run task actions on ":plugin:task --dry-run".
//  The bug is known since June 2017 and still not fixed.
//  The workaround used below is described here: https://github.com/gradle/gradle/issues/2517#issuecomment-437490287
if (gradle.parent != null && gradle.parent!!.startParameter.isDryRun) {
    gradle.startParameter.isDryRun = true
}

gradlePlugin {
    plugins {
        create("plugin") {
            id = "org.jetbrains.kotlinx.rpc.plugin"

            displayName = "kotlinx.rpc Gradle Plugin"
            implementationClass = "kotlinx.rpc.RpcGradlePlugin"
            description = """
                The plugin ensures correct RPC configurations for your project, that will allow proper code generation. 
            """.trimIndent()
        }
    }
}

abstract class GeneratePluginVersionsTask @Inject constructor(
    @get:Input val libraryVersion: String,
    @get:Input val bufToolVersion: String,
    @get:OutputDirectory val sourcesDir: File
) : DefaultTask() {
    @TaskAction
    fun generate() {
        val sourceFile = File(sourcesDir, "Versions.kt")

        sourceFile.writeText(
            """
// This file is generated by a $NAME gradle task. Do not modify manually.

package kotlinx.rpc

/**
 * The version of the kotlinx.rpc library.
 */
public const val LIBRARY_VERSION: String = "$libraryVersion"

/**
 * The version of the buf tool used to generate protobuf.
 */
public const val BUF_TOOL_VERSION: String = "$bufToolVersion"

""".trimIndent()
        )
    }

    companion object Companion {
        const val NAME = "generatePluginVersions"
    }
}

val sourcesDir = File(project.layout.buildDirectory.asFile.get(), "generated-sources/pluginVersions")

val generatePluginVersionsTask = tasks.register<GeneratePluginVersionsTask>(
    GeneratePluginVersionsTask.NAME,
    version.toString(),
    libs.versions.buf.tool.get(),
    sourcesDir,
)

abstract class GenerateTestVersionTask @Inject constructor(
    @get:Input val kotlinVersion: String,
    @get:Input val buildRepo: String,
    @get:OutputDirectory val sourcesDir: File
) : DefaultTask() {
    @TaskAction
    fun generate() {
        val sourceFile = File(sourcesDir, "Versions.kt")

        sourceFile.writeText(
            """
// This file is generated by a $NAME gradle task. Do not modify manually.

package kotlinx.rpc

const val KOTLIN_VERSION: String = "$kotlinVersion"

const val BUILD_REPO: String = "$buildRepo"

""".trimIndent()
        )
    }

    companion object {
        const val NAME = "generateTestVersions"
    }
}

val testSourcesDir = File(project.layout.buildDirectory.asFile.get(), "generated-sources/testVersions")

val globalRootDir: String by extra

val generateTestVersionsTask = tasks.register<GenerateTestVersionTask>(
    GenerateTestVersionTask.NAME,
    libs.versions.kotlin.lang.get(),
    File(globalRootDir).resolve("build/repo").absolutePath,
    testSourcesDir,
)

kotlin {
    sourceSets {
        main {
            kotlin.srcDir(generatePluginVersionsTask.map { it.sourcesDir })
        }
        test {
            kotlin.srcDir(generateTestVersionsTask.map { it.sourcesDir })
        }
    }
}

logger.lifecycle("[Gradle Plugin] kotlinx.rpc project version: $version")
