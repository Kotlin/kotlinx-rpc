// Klib ABI Dump
// Targets: [macosArm64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <org.jetbrains.kotlinx:grpc-core>
open annotation class kotlinx.rpc.grpc.annotations/Grpc : kotlin/Annotation { // kotlinx.rpc.grpc.annotations/Grpc|null[0]
    constructor <init>() // kotlinx.rpc.grpc.annotations/Grpc.<init>|<init>(){}[0]
}

final enum class kotlinx.rpc.grpc/StatusCode : kotlin/Enum<kotlinx.rpc.grpc/StatusCode> { // kotlinx.rpc.grpc/StatusCode|null[0]
    enum entry ABORTED // kotlinx.rpc.grpc/StatusCode.ABORTED|null[0]
    enum entry ALREADY_EXISTS // kotlinx.rpc.grpc/StatusCode.ALREADY_EXISTS|null[0]
    enum entry CANCELLED // kotlinx.rpc.grpc/StatusCode.CANCELLED|null[0]
    enum entry DATA_LOSS // kotlinx.rpc.grpc/StatusCode.DATA_LOSS|null[0]
    enum entry DEADLINE_EXCEEDED // kotlinx.rpc.grpc/StatusCode.DEADLINE_EXCEEDED|null[0]
    enum entry FAILED_PRECONDITION // kotlinx.rpc.grpc/StatusCode.FAILED_PRECONDITION|null[0]
    enum entry INTERNAL // kotlinx.rpc.grpc/StatusCode.INTERNAL|null[0]
    enum entry INVALID_ARGUMENT // kotlinx.rpc.grpc/StatusCode.INVALID_ARGUMENT|null[0]
    enum entry NOT_FOUND // kotlinx.rpc.grpc/StatusCode.NOT_FOUND|null[0]
    enum entry OK // kotlinx.rpc.grpc/StatusCode.OK|null[0]
    enum entry OUT_OF_RANGE // kotlinx.rpc.grpc/StatusCode.OUT_OF_RANGE|null[0]
    enum entry PERMISSION_DENIED // kotlinx.rpc.grpc/StatusCode.PERMISSION_DENIED|null[0]
    enum entry RESOURCE_EXHAUSTED // kotlinx.rpc.grpc/StatusCode.RESOURCE_EXHAUSTED|null[0]
    enum entry UNAUTHENTICATED // kotlinx.rpc.grpc/StatusCode.UNAUTHENTICATED|null[0]
    enum entry UNAVAILABLE // kotlinx.rpc.grpc/StatusCode.UNAVAILABLE|null[0]
    enum entry UNIMPLEMENTED // kotlinx.rpc.grpc/StatusCode.UNIMPLEMENTED|null[0]
    enum entry UNKNOWN // kotlinx.rpc.grpc/StatusCode.UNKNOWN|null[0]

    final val entries // kotlinx.rpc.grpc/StatusCode.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<kotlinx.rpc.grpc/StatusCode> // kotlinx.rpc.grpc/StatusCode.entries.<get-entries>|<get-entries>#static(){}[0]
    final val value // kotlinx.rpc.grpc/StatusCode.value|{}value[0]
        final fun <get-value>(): kotlin/Int // kotlinx.rpc.grpc/StatusCode.value.<get-value>|<get-value>(){}[0]
    final val valueAscii // kotlinx.rpc.grpc/StatusCode.valueAscii|{}valueAscii[0]
        final fun <get-valueAscii>(): kotlin/ByteArray // kotlinx.rpc.grpc/StatusCode.valueAscii.<get-valueAscii>|<get-valueAscii>(){}[0]

    final fun valueOf(kotlin/String): kotlinx.rpc.grpc/StatusCode // kotlinx.rpc.grpc/StatusCode.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<kotlinx.rpc.grpc/StatusCode> // kotlinx.rpc.grpc/StatusCode.values|values#static(){}[0]
}

abstract interface kotlinx.rpc.grpc/ManagedChannel { // kotlinx.rpc.grpc/ManagedChannel|null[0]
    abstract val isShutdown // kotlinx.rpc.grpc/ManagedChannel.isShutdown|{}isShutdown[0]
        abstract fun <get-isShutdown>(): kotlin/Boolean // kotlinx.rpc.grpc/ManagedChannel.isShutdown.<get-isShutdown>|<get-isShutdown>(){}[0]
    abstract val isTerminated // kotlinx.rpc.grpc/ManagedChannel.isTerminated|{}isTerminated[0]
        abstract fun <get-isTerminated>(): kotlin/Boolean // kotlinx.rpc.grpc/ManagedChannel.isTerminated.<get-isTerminated>|<get-isTerminated>(){}[0]
    abstract val platformApi // kotlinx.rpc.grpc/ManagedChannel.platformApi|{}platformApi[0]
        abstract fun <get-platformApi>(): kotlinx.rpc.grpc/ManagedChannelPlatform // kotlinx.rpc.grpc/ManagedChannel.platformApi.<get-platformApi>|<get-platformApi>(){}[0]

    abstract fun shutdown(): kotlinx.rpc.grpc/ManagedChannel // kotlinx.rpc.grpc/ManagedChannel.shutdown|shutdown(){}[0]
    abstract fun shutdownNow(): kotlinx.rpc.grpc/ManagedChannel // kotlinx.rpc.grpc/ManagedChannel.shutdownNow|shutdownNow(){}[0]
    abstract suspend fun awaitTermination(kotlin.time/Duration = ...): kotlin/Boolean // kotlinx.rpc.grpc/ManagedChannel.awaitTermination|awaitTermination(kotlin.time.Duration){}[0]
}

abstract interface kotlinx.rpc.grpc/Server { // kotlinx.rpc.grpc/Server|null[0]
    abstract val isShutdown // kotlinx.rpc.grpc/Server.isShutdown|{}isShutdown[0]
        abstract fun <get-isShutdown>(): kotlin/Boolean // kotlinx.rpc.grpc/Server.isShutdown.<get-isShutdown>|<get-isShutdown>(){}[0]
    abstract val isTerminated // kotlinx.rpc.grpc/Server.isTerminated|{}isTerminated[0]
        abstract fun <get-isTerminated>(): kotlin/Boolean // kotlinx.rpc.grpc/Server.isTerminated.<get-isTerminated>|<get-isTerminated>(){}[0]
    abstract val port // kotlinx.rpc.grpc/Server.port|{}port[0]
        abstract fun <get-port>(): kotlin/Int // kotlinx.rpc.grpc/Server.port.<get-port>|<get-port>(){}[0]

    abstract fun shutdown(): kotlinx.rpc.grpc/Server // kotlinx.rpc.grpc/Server.shutdown|shutdown(){}[0]
    abstract fun shutdownNow(): kotlinx.rpc.grpc/Server // kotlinx.rpc.grpc/Server.shutdownNow|shutdownNow(){}[0]
    abstract fun start(): kotlinx.rpc.grpc/Server // kotlinx.rpc.grpc/Server.start|start(){}[0]
    abstract suspend fun awaitTermination(kotlin.time/Duration = ...): kotlinx.rpc.grpc/Server // kotlinx.rpc.grpc/Server.awaitTermination|awaitTermination(kotlin.time.Duration){}[0]
}

abstract class <#A: kotlinx.rpc.grpc/ManagedChannelBuilder<#A>> kotlinx.rpc.grpc/ManagedChannelBuilder { // kotlinx.rpc.grpc/ManagedChannelBuilder|null[0]
    constructor <init>() // kotlinx.rpc.grpc/ManagedChannelBuilder.<init>|<init>(){}[0]

    final fun usePlaintext(): #A // kotlinx.rpc.grpc/ManagedChannelBuilder.usePlaintext|usePlaintext(){}[0]
}

abstract class <#A: kotlinx.rpc.grpc/ServerBuilder<#A>> kotlinx.rpc.grpc/ServerBuilder { // kotlinx.rpc.grpc/ServerBuilder|null[0]
    constructor <init>() // kotlinx.rpc.grpc/ServerBuilder.<init>|<init>(){}[0]

    abstract fun addService(kotlinx.rpc.grpc/ServerServiceDefinition): #A // kotlinx.rpc.grpc/ServerBuilder.addService|addService(kotlinx.rpc.grpc.ServerServiceDefinition){}[0]
    abstract fun fallbackHandlerRegistry(kotlinx.rpc.grpc/HandlerRegistry?): #A // kotlinx.rpc.grpc/ServerBuilder.fallbackHandlerRegistry|fallbackHandlerRegistry(kotlinx.rpc.grpc.HandlerRegistry?){}[0]
}

abstract class kotlinx.rpc.grpc/HandlerRegistry { // kotlinx.rpc.grpc/HandlerRegistry|null[0]
    constructor <init>() // kotlinx.rpc.grpc/HandlerRegistry.<init>|<init>(){}[0]
}

abstract class kotlinx.rpc.grpc/ManagedChannelPlatform : kotlinx.rpc.grpc.internal/GrpcChannel { // kotlinx.rpc.grpc/ManagedChannelPlatform|null[0]
    constructor <init>() // kotlinx.rpc.grpc/ManagedChannelPlatform.<init>|<init>(){}[0]
}

final class kotlinx.rpc.grpc/GrpcClient : kotlinx.rpc/RpcClient { // kotlinx.rpc.grpc/GrpcClient|null[0]
    final fun <#A1: kotlin/Any?> callServerStreaming(kotlinx.rpc/RpcCall): kotlinx.coroutines.flow/Flow<#A1> // kotlinx.rpc.grpc/GrpcClient.callServerStreaming|callServerStreaming(kotlinx.rpc.RpcCall){0ยง<kotlin.Any?>}[0]
    final fun shutdown() // kotlinx.rpc.grpc/GrpcClient.shutdown|shutdown(){}[0]
    final fun shutdownNow() // kotlinx.rpc.grpc/GrpcClient.shutdownNow|shutdownNow(){}[0]
    final suspend fun <#A1: kotlin/Any?> call(kotlinx.rpc/RpcCall): #A1 // kotlinx.rpc.grpc/GrpcClient.call|call(kotlinx.rpc.RpcCall){0ยง<kotlin.Any?>}[0]
    final suspend fun awaitTermination(kotlin.time/Duration = ...) // kotlinx.rpc.grpc/GrpcClient.awaitTermination|awaitTermination(kotlin.time.Duration){}[0]
}

final class kotlinx.rpc.grpc/GrpcServer : kotlinx.rpc.grpc/Server, kotlinx.rpc/RpcServer { // kotlinx.rpc.grpc/GrpcServer|null[0]
    final val isShutdown // kotlinx.rpc.grpc/GrpcServer.isShutdown|{}isShutdown[0]
        final fun <get-isShutdown>(): kotlin/Boolean // kotlinx.rpc.grpc/GrpcServer.isShutdown.<get-isShutdown>|<get-isShutdown>(){}[0]
    final val isTerminated // kotlinx.rpc.grpc/GrpcServer.isTerminated|{}isTerminated[0]
        final fun <get-isTerminated>(): kotlin/Boolean // kotlinx.rpc.grpc/GrpcServer.isTerminated.<get-isTerminated>|<get-isTerminated>(){}[0]
    final val port // kotlinx.rpc.grpc/GrpcServer.port|{}port[0]
        final fun <get-port>(): kotlin/Int // kotlinx.rpc.grpc/GrpcServer.port.<get-port>|<get-port>(){}[0]

    final fun <#A1: kotlin/Any> deregisterService(kotlin.reflect/KClass<#A1>) // kotlinx.rpc.grpc/GrpcServer.deregisterService|deregisterService(kotlin.reflect.KClass<0:0>){0ยง<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> registerService(kotlin.reflect/KClass<#A1>, kotlin/Function0<#A1>) // kotlinx.rpc.grpc/GrpcServer.registerService|registerService(kotlin.reflect.KClass<0:0>;kotlin.Function0<0:0>){0ยง<kotlin.Any>}[0]
    final fun shutdown(): kotlinx.rpc.grpc/GrpcServer // kotlinx.rpc.grpc/GrpcServer.shutdown|shutdown(){}[0]
    final fun shutdownNow(): kotlinx.rpc.grpc/GrpcServer // kotlinx.rpc.grpc/GrpcServer.shutdownNow|shutdownNow(){}[0]
    final fun start(): kotlinx.rpc.grpc/GrpcServer // kotlinx.rpc.grpc/GrpcServer.start|start(){}[0]
    final suspend fun awaitTermination(kotlin.time/Duration): kotlinx.rpc.grpc/GrpcServer // kotlinx.rpc.grpc/GrpcServer.awaitTermination|awaitTermination(kotlin.time.Duration){}[0]
}

final class kotlinx.rpc.grpc/GrpcTrailers { // kotlinx.rpc.grpc/GrpcTrailers|null[0]
    constructor <init>() // kotlinx.rpc.grpc/GrpcTrailers.<init>|<init>(){}[0]

    final fun merge(kotlinx.rpc.grpc/GrpcTrailers) // kotlinx.rpc.grpc/GrpcTrailers.merge|merge(kotlinx.rpc.grpc.GrpcTrailers){}[0]
}

final class kotlinx.rpc.grpc/ServerServiceDefinition { // kotlinx.rpc.grpc/ServerServiceDefinition|null[0]
    constructor <init>() // kotlinx.rpc.grpc/ServerServiceDefinition.<init>|<init>(){}[0]

    final fun getMethods(): kotlin.collections/Collection<kotlinx.rpc.grpc.internal/ServerMethodDefinition<*, *>> // kotlinx.rpc.grpc/ServerServiceDefinition.getMethods|getMethods(){}[0]
    final fun getServiceDescriptor(): kotlinx.rpc.grpc.internal/ServiceDescriptor // kotlinx.rpc.grpc/ServerServiceDefinition.getServiceDescriptor|getServiceDescriptor(){}[0]
}

final class kotlinx.rpc.grpc/Status { // kotlinx.rpc.grpc/Status|null[0]
    constructor <init>() // kotlinx.rpc.grpc/Status.<init>|<init>(){}[0]

    final fun getCause(): kotlin/Throwable? // kotlinx.rpc.grpc/Status.getCause|getCause(){}[0]
    final fun getDescription(): kotlin/String? // kotlinx.rpc.grpc/Status.getDescription|getDescription(){}[0]
}

final class kotlinx.rpc.grpc/StatusException : kotlin/Exception { // kotlinx.rpc.grpc/StatusException|null[0]
    constructor <init>(kotlinx.rpc.grpc/Status) // kotlinx.rpc.grpc/StatusException.<init>|<init>(kotlinx.rpc.grpc.Status){}[0]
    constructor <init>(kotlinx.rpc.grpc/Status, kotlinx.rpc.grpc/GrpcTrailers?) // kotlinx.rpc.grpc/StatusException.<init>|<init>(kotlinx.rpc.grpc.Status;kotlinx.rpc.grpc.GrpcTrailers?){}[0]

    final fun getStatus(): kotlinx.rpc.grpc/Status // kotlinx.rpc.grpc/StatusException.getStatus|getStatus(){}[0]
    final fun getTrailers(): kotlinx.rpc.grpc/GrpcTrailers? // kotlinx.rpc.grpc/StatusException.getTrailers|getTrailers(){}[0]
}

final class kotlinx.rpc.grpc/StatusRuntimeException : kotlin/RuntimeException { // kotlinx.rpc.grpc/StatusRuntimeException|null[0]
    constructor <init>(kotlinx.rpc.grpc/Status) // kotlinx.rpc.grpc/StatusRuntimeException.<init>|<init>(kotlinx.rpc.grpc.Status){}[0]
    constructor <init>(kotlinx.rpc.grpc/Status, kotlinx.rpc.grpc/GrpcTrailers?) // kotlinx.rpc.grpc/StatusRuntimeException.<init>|<init>(kotlinx.rpc.grpc.Status;kotlinx.rpc.grpc.GrpcTrailers?){}[0]

    final fun getStatus(): kotlinx.rpc.grpc/Status // kotlinx.rpc.grpc/StatusRuntimeException.getStatus|getStatus(){}[0]
    final fun getTrailers(): kotlinx.rpc.grpc/GrpcTrailers? // kotlinx.rpc.grpc/StatusRuntimeException.getTrailers|getTrailers(){}[0]
}

final val kotlinx.rpc.grpc/code // kotlinx.rpc.grpc/code|@kotlinx.rpc.grpc.Status{}code[0]
    final fun (kotlinx.rpc.grpc/Status).<get-code>(): kotlinx.rpc.grpc/StatusCode // kotlinx.rpc.grpc/code.<get-code>|<get-code>@kotlinx.rpc.grpc.Status(){}[0]

final fun kotlinx.rpc.grpc/GrpcClient(kotlin/String, kotlin/Int, kotlinx.rpc.grpc.codec/MessageCodecResolver = ..., kotlin/Function1<kotlinx.rpc.grpc/ManagedChannelBuilder<*>, kotlin/Unit> = ...): kotlinx.rpc.grpc/GrpcClient // kotlinx.rpc.grpc/GrpcClient|GrpcClient(kotlin.String;kotlin.Int;kotlinx.rpc.grpc.codec.MessageCodecResolver;kotlin.Function1<kotlinx.rpc.grpc.ManagedChannelBuilder<*>,kotlin.Unit>){}[0]
final fun kotlinx.rpc.grpc/GrpcClient(kotlin/String, kotlinx.rpc.grpc.codec/MessageCodecResolver = ..., kotlin/Function1<kotlinx.rpc.grpc/ManagedChannelBuilder<*>, kotlin/Unit> = ...): kotlinx.rpc.grpc/GrpcClient // kotlinx.rpc.grpc/GrpcClient|GrpcClient(kotlin.String;kotlinx.rpc.grpc.codec.MessageCodecResolver;kotlin.Function1<kotlinx.rpc.grpc.ManagedChannelBuilder<*>,kotlin.Unit>){}[0]
final fun kotlinx.rpc.grpc/GrpcServer(kotlin/Int, kotlinx.rpc.grpc.codec/MessageCodecResolver = ..., kotlin.coroutines/CoroutineContext = ..., kotlin/Function1<kotlinx.rpc.grpc/ServerBuilder<*>, kotlin/Unit> = ..., kotlin/Function1<kotlinx.rpc/RpcServer, kotlin/Unit> = ...): kotlinx.rpc.grpc/GrpcServer // kotlinx.rpc.grpc/GrpcServer|GrpcServer(kotlin.Int;kotlinx.rpc.grpc.codec.MessageCodecResolver;kotlin.coroutines.CoroutineContext;kotlin.Function1<kotlinx.rpc.grpc.ServerBuilder<*>,kotlin.Unit>;kotlin.Function1<kotlinx.rpc.RpcServer,kotlin.Unit>){}[0]
final fun kotlinx.rpc.grpc/Status(kotlinx.rpc.grpc/StatusCode, kotlin/String? = ..., kotlin/Throwable? = ...): kotlinx.rpc.grpc/Status // kotlinx.rpc.grpc/Status|Status(kotlinx.rpc.grpc.StatusCode;kotlin.String?;kotlin.Throwable?){}[0]
