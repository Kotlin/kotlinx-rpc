FILE: rpcService.kt
    @FILE:R|kotlin/OptIn|(markerClass = vararg(<getClass>(Q|kotlinx/rpc/internal/utils/ExperimentalRpcApi|)))
    @R|kotlinx/rpc/annotations/Rpc|() public abstract interface MyService : R|kotlin/Any|, R|kotlinx/rpc/RemoteService| {
        public abstract fun hello(): R|kotlin/Unit|

        public abstract suspend fun <T> generic(a: R|T|): R|kotlin/Unit|

        public abstract suspend fun <T, T2, T3, T4 : R|kotlin/collections/List<T>|> generic2(a: R|T|, b: R|kotlin/Int|, c: R|T4|, t2: R|T2|): R|T3|

        public abstract suspend fun sameName(): R|kotlin/Unit|

        public abstract suspend fun sameName(a: R|kotlin/Int|): R|kotlin/Unit|

        public abstract suspend fun sameName(a: R|kotlin/Int|, b: R|kotlin/Int|): R|kotlin/Unit|

        public abstract suspend fun sameName(a: R|kotlin/Int|, b: R|kotlin/Int|, c: R|kotlin/Int|): R|kotlin/Unit|

        public abstract suspend fun sameName2(): R|kotlin/Unit|

        public abstract suspend fun sameName2(a: R|kotlin/Int|): R|kotlin/Unit|

        public final class $rpcServiceStub : R|kotlin/Any| {
            @R|kotlinx/serialization/Serializable|() public final object hello$rpcMethod : R|kotlin/Any| {
                public final fun serializer(): R|kotlinx/serialization/KSerializer<MyService.$rpcServiceStub.hello$rpcMethod>|

                private constructor(): R|MyService.$rpcServiceStub.hello$rpcMethod| {
                    super<R|kotlin/Any|>()
                }

            }

            @R|kotlinx/serialization/Serializable|() public final class generic$rpcMethod : R|kotlin/Any| {
                public final val a: R|T|
                    public get(): R|T|

                public constructor(a: R|T|): R|MyService.$rpcServiceStub.generic$rpcMethod|

                public final companion object Companion : R|kotlin/Any| {
                    public final fun serializer(): R|kotlinx/serialization/KSerializer<MyService.$rpcServiceStub.generic$rpcMethod>|

                    private constructor(): R|MyService.$rpcServiceStub.generic$rpcMethod.Companion| {
                        super<R|kotlin/Any|>()
                    }

                }

                @R|kotlin/Deprecated|(message = String(This synthesized declaration should not be used directly), level = Q|kotlin/DeprecationLevel|.R|kotlin/DeprecationLevel.HIDDEN|) public final object $serializer : R|kotlinx/serialization/internal/GeneratedSerializer<MyService.$rpcServiceStub.generic$rpcMethod>| {
                    public final override fun serialize(encoder: R|kotlinx/serialization/encoding/Encoder|, value: R|MyService.$rpcServiceStub.generic$rpcMethod|): R|kotlin/Unit|

                    public final override fun deserialize(decoder: R|kotlinx/serialization/encoding/Decoder|): R|MyService.$rpcServiceStub.generic$rpcMethod|

                    public final val descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|
                        public get(): R|kotlinx/serialization/descriptors/SerialDescriptor|

                    public final override fun childSerializers(): R|kotlin/Array<kotlinx/serialization/KSerializer<*>>|

                    private constructor(): R|MyService.$rpcServiceStub.generic$rpcMethod.$serializer| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

            @R|kotlinx/serialization/Serializable|() public final class generic2$rpcMethod : R|kotlin/Any| {
                public final val a: R|T|
                    public get(): R|T|

                public final val b: R|kotlin/Int|
                    public get(): R|kotlin/Int|

                public final val c: R|T4|
                    public get(): R|T4|

                public final val t2: R|T2|
                    public get(): R|T2|

                public constructor(a: R|T|, b: R|kotlin/Int|, c: R|T4|, t2: R|T2|): R|MyService.$rpcServiceStub.generic2$rpcMethod|

                public final companion object Companion : R|kotlin/Any| {
                    public final fun serializer(): R|kotlinx/serialization/KSerializer<MyService.$rpcServiceStub.generic2$rpcMethod>|

                    private constructor(): R|MyService.$rpcServiceStub.generic2$rpcMethod.Companion| {
                        super<R|kotlin/Any|>()
                    }

                }

                @R|kotlin/Deprecated|(message = String(This synthesized declaration should not be used directly), level = Q|kotlin/DeprecationLevel|.R|kotlin/DeprecationLevel.HIDDEN|) public final object $serializer : R|kotlinx/serialization/internal/GeneratedSerializer<MyService.$rpcServiceStub.generic2$rpcMethod>| {
                    public final override fun serialize(encoder: R|kotlinx/serialization/encoding/Encoder|, value: R|MyService.$rpcServiceStub.generic2$rpcMethod|): R|kotlin/Unit|

                    public final override fun deserialize(decoder: R|kotlinx/serialization/encoding/Decoder|): R|MyService.$rpcServiceStub.generic2$rpcMethod|

                    public final val descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|
                        public get(): R|kotlinx/serialization/descriptors/SerialDescriptor|

                    public final override fun childSerializers(): R|kotlin/Array<kotlinx/serialization/KSerializer<*>>|

                    private constructor(): R|MyService.$rpcServiceStub.generic2$rpcMethod.$serializer| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

            public final companion object Companion : R|kotlin/Any| {
            }

        }

    }
    @R|kotlinx/rpc/annotations/Rpc|() public abstract interface MyServiceT<T> : R|kotlin/Any|, R|kotlinx/rpc/RemoteService| {
        public final class $rpcServiceStub : R|kotlin/Any| {
            public final companion object Companion : R|kotlin/Any| {
            }

        }

    }
    @R|kotlinx/rpc/annotations/Rpc|() public abstract interface MyServiceT2<T, R, A, B> : R|kotlin/Any|, R|kotlinx/rpc/RemoteService| {
        public final class $rpcServiceStub : R|kotlin/Any| {
            public final companion object Companion : R|kotlin/Any| {
            }

        }

    }
