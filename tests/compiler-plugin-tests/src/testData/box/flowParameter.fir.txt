FILE: flowParameter.kt
    @R|kotlinx/rpc/annotations/Rpc|() public abstract interface BoxService : R|kotlin/Any| {
        public abstract suspend fun stream(flow: R|kotlinx/coroutines/flow/Flow<kotlin/String>|): R|kotlin/String|

        public final class $rpcServiceStub : R|kotlin/Any| {
            public final companion object Companion : R|kotlin/Any| {
            }

        }

    }
    public final fun box(): R|kotlin/String| {
        ^box R|kotlinx/coroutines/runBlocking|<R|kotlin/String|>(<L> = runBlocking@fun R|kotlinx/coroutines/CoroutineScope|.<anonymous>(): R|kotlin/String| <inline=NoInline, kind=EXACTLY_ONCE>  {
            lval result: R|kotlin/String| = Q|kotlinx/rpc/codegen/test/TestRpcClient|.R|kotlinx/rpc/withService|<R|BoxService|>().R|/BoxService.stream|(R|kotlinx/coroutines/flow/flow|<R|kotlin/String|>(<L> = flow@fun R|kotlinx/coroutines/flow/FlowCollector<kotlin/String>|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
                ^@flow Unit
            }
            ))
            ^ when () {
                ==(R|<local>/result|, String(call_42)) ->  {
                    String(OK)
                }
                else ->  {
                    <strcat>(String(Fail: ), R|<local>/result|)
                }
            }

        }
        )
    }
