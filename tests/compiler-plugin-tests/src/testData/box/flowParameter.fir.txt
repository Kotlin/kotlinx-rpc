FILE: flowParameter.kt
    @R|kotlinx/rpc/annotations/Rpc|() public abstract interface BoxService : R|kotlinx/rpc/RemoteService| {
        public abstract suspend fun stream(flow: R|kotlinx/coroutines/flow/Flow<kotlin/String>|): R|kotlin/String|

        public final class $rpcServiceStub : R|kotlin/Any| {
            @R|kotlinx/serialization/Serializable|() public final class stream$rpcMethod : R|kotlin/Any| {
                @R|kotlinx/serialization/Contextual|() public final val flow: R|kotlinx/coroutines/flow/Flow<kotlin/String>|
                    public get(): R|kotlinx/coroutines/flow/Flow<kotlin/String>|

                public constructor(flow: R|kotlinx/coroutines/flow/Flow<kotlin/String>|): R|BoxService.$rpcServiceStub.stream$rpcMethod|

                public final companion object Companion : R|kotlin/Any| {
                    public final fun serializer(): R|kotlinx/serialization/KSerializer<BoxService.$rpcServiceStub.stream$rpcMethod>|

                    private constructor(): R|BoxService.$rpcServiceStub.stream$rpcMethod.Companion| {
                        super<R|kotlin/Any|>()
                    }

                }

                @R|kotlin/Deprecated|(message = String(This synthesized declaration should not be used directly), level = Q|kotlin/DeprecationLevel|.R|kotlin/DeprecationLevel.HIDDEN|) public final object $serializer : R|kotlinx/serialization/internal/GeneratedSerializer<BoxService.$rpcServiceStub.stream$rpcMethod>| {
                    public final override fun serialize(encoder: R|kotlinx/serialization/encoding/Encoder|, value: R|BoxService.$rpcServiceStub.stream$rpcMethod|): R|kotlin/Unit|

                    public final override fun deserialize(decoder: R|kotlinx/serialization/encoding/Decoder|): R|BoxService.$rpcServiceStub.stream$rpcMethod|

                    public final val descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|
                        public get(): R|kotlinx/serialization/descriptors/SerialDescriptor|

                    public final override fun childSerializers(): R|kotlin/Array<kotlinx/serialization/KSerializer<*>>|

                    private constructor(): R|BoxService.$rpcServiceStub.stream$rpcMethod.$serializer| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

            public final companion object Companion : R|kotlin/Any| {
            }

        }

    }
    public final fun box(): R|kotlin/String| {
        ^box R|kotlinx/coroutines/runBlocking|<R|kotlin/String|>(<L> = runBlocking@fun R|kotlinx/coroutines/CoroutineScope|.<anonymous>(): R|kotlin/String| <inline=NoInline, kind=EXACTLY_ONCE>  {
            lval result: R|kotlin/String| = Q|kotlinx/rpc/codegen/test/TestRpcClient|.R|kotlinx/rpc/withService|<R|BoxService|>().R|/BoxService.stream|(R|kotlinx/coroutines/flow/flow|<R|kotlin/String|>(<L> = flow@fun R|kotlinx/coroutines/flow/FlowCollector<kotlin/String>|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
                ^@flow Unit
            }
            ))
            ^ when () {
                ==(R|<local>/result|, String(call_42)) ->  {
                    String(OK)
                }
                else ->  {
                    <strcat>(String(Fail: ), R|<local>/result|)
                }
            }

        }
        )
    }
