FILE: customParameterTypes.kt
    public final data class TestData : R|kotlin/Any| {
        public constructor(value: R|kotlin/String|): R|TestData| {
            super<R|kotlin/Any|>()
        }

        public final val value: R|kotlin/String| = R|<local>/value|
            public get(): R|kotlin/String|

        public final operator fun component1(): R|kotlin/String|

        public final fun copy(value: R|kotlin/String| = this@R|/TestData|.R|/TestData.value|): R|TestData|

    }
    @R|kotlinx/rpc/annotations/Rpc|() public abstract interface BoxService : R|kotlin/Any| {
        public abstract suspend fun test1(testData: R|TestData|): R|kotlin/String|

        public abstract suspend fun test2(testData: R|TestData|): R|kotlin/String|

        public final class $rpcServiceStub : R|kotlin/Any| {
            public final companion object Companion : R|kotlin/Any| {
            }

        }

    }
    public final fun box(): R|kotlin/String| {
        ^box R|kotlinx/coroutines/runBlocking|<R|kotlin/String|>(<L> = runBlocking@fun R|kotlinx/coroutines/CoroutineScope|.<anonymous>(): R|kotlin/String| <inline=NoInline, kind=EXACTLY_ONCE>  {
            lval test1: R|kotlin/String| = Q|kotlinx/rpc/codegen/test/TestRpcClient|.R|kotlinx/rpc/withService|<R|BoxService|>().R|/BoxService.test1|(R|/TestData.TestData|(String(value)))
            lval test2: R|kotlin/String| = Q|kotlinx/rpc/codegen/test/TestRpcClient|.R|kotlinx/rpc/withService|<R|BoxService|>().R|/BoxService.test2|(R|/TestData.TestData|(String(value)))
            ^ when () {
                ==(R|<local>/test1|, String(call_42)) && ==(R|<local>/test2|, String(call_42)) ->  {
                    String(OK)
                }
                else ->  {
                    <strcat>(String(Fail: test1=), R|<local>/test1|, String(, test2=), R|<local>/test2|)
                }
            }

        }
        )
    }
