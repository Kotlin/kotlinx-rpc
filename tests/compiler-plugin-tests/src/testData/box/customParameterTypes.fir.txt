FILE: customParameterTypes.kt
    @R|kotlinx/serialization/Serializable|() public final data class TestData : R|kotlin/Any| {
        public constructor(value: R|kotlin/String|): R|TestData| {
            super<R|kotlin/Any|>()
        }

        public final val value: R|kotlin/String| = R|<local>/value|
            public get(): R|kotlin/String|

        public final operator fun component1(): R|kotlin/String|

        public final fun copy(value: R|kotlin/String| = this@R|/TestData|.R|/TestData.value|): R|TestData|

        public final companion object Companion : R|kotlin/Any| {
            public final fun serializer(): R|kotlinx/serialization/KSerializer<TestData>|

            private constructor(): R|TestData.Companion| {
                super<R|kotlin/Any|>()
            }

        }

        @R|kotlin/Deprecated|(message = String(This synthesized declaration should not be used directly), level = Q|kotlin/DeprecationLevel|.R|kotlin/DeprecationLevel.HIDDEN|) public final object $serializer : R|kotlinx/serialization/internal/GeneratedSerializer<TestData>| {
            public final override fun serialize(encoder: R|kotlinx/serialization/encoding/Encoder|, value: R|TestData|): R|kotlin/Unit|

            public final override fun deserialize(decoder: R|kotlinx/serialization/encoding/Decoder|): R|TestData|

            public final val descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|
                public get(): R|kotlinx/serialization/descriptors/SerialDescriptor|

            public final override fun childSerializers(): R|kotlin/Array<kotlinx/serialization/KSerializer<*>>|

            private constructor(): R|TestData.$serializer| {
                super<R|kotlin/Any|>()
            }

        }

    }
    public abstract interface BoxService : R|kotlinx/rpc/RPC| {
        public abstract suspend fun test1(testData: R|TestData|): R|kotlin/String|

        public abstract suspend fun test2(testData: R|TestData|): R|kotlin/String|

        public final class $rpcServiceStub : R|kotlin/Any| {
            @R|kotlinx/serialization/Serializable|() public final class test1$rpcMethod : R|kotlin/Any| {
                public final val testData: R|TestData|
                    public get(): R|TestData|

                public constructor(testData: R|TestData|): R|BoxService.$rpcServiceStub.test1$rpcMethod|

                public final companion object Companion : R|kotlin/Any| {
                    public final fun serializer(): R|kotlinx/serialization/KSerializer<BoxService.$rpcServiceStub.test1$rpcMethod>|

                    private constructor(): R|BoxService.$rpcServiceStub.test1$rpcMethod.Companion| {
                        super<R|kotlin/Any|>()
                    }

                }

                @R|kotlin/Deprecated|(message = String(This synthesized declaration should not be used directly), level = Q|kotlin/DeprecationLevel|.R|kotlin/DeprecationLevel.HIDDEN|) public final object $serializer : R|kotlinx/serialization/internal/GeneratedSerializer<BoxService.$rpcServiceStub.test1$rpcMethod>| {
                    public final override fun serialize(encoder: R|kotlinx/serialization/encoding/Encoder|, value: R|BoxService.$rpcServiceStub.test1$rpcMethod|): R|kotlin/Unit|

                    public final override fun deserialize(decoder: R|kotlinx/serialization/encoding/Decoder|): R|BoxService.$rpcServiceStub.test1$rpcMethod|

                    public final val descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|
                        public get(): R|kotlinx/serialization/descriptors/SerialDescriptor|

                    public final override fun childSerializers(): R|kotlin/Array<kotlinx/serialization/KSerializer<*>>|

                    private constructor(): R|BoxService.$rpcServiceStub.test1$rpcMethod.$serializer| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

            @R|kotlinx/serialization/Serializable|() public final class test2$rpcMethod : R|kotlin/Any| {
                public final val testData: R|TestData|
                    public get(): R|TestData|

                public constructor(testData: R|TestData|): R|BoxService.$rpcServiceStub.test2$rpcMethod|

                public final companion object Companion : R|kotlin/Any| {
                    public final fun serializer(): R|kotlinx/serialization/KSerializer<BoxService.$rpcServiceStub.test2$rpcMethod>|

                    private constructor(): R|BoxService.$rpcServiceStub.test2$rpcMethod.Companion| {
                        super<R|kotlin/Any|>()
                    }

                }

                @R|kotlin/Deprecated|(message = String(This synthesized declaration should not be used directly), level = Q|kotlin/DeprecationLevel|.R|kotlin/DeprecationLevel.HIDDEN|) public final object $serializer : R|kotlinx/serialization/internal/GeneratedSerializer<BoxService.$rpcServiceStub.test2$rpcMethod>| {
                    public final override fun serialize(encoder: R|kotlinx/serialization/encoding/Encoder|, value: R|BoxService.$rpcServiceStub.test2$rpcMethod|): R|kotlin/Unit|

                    public final override fun deserialize(decoder: R|kotlinx/serialization/encoding/Decoder|): R|BoxService.$rpcServiceStub.test2$rpcMethod|

                    public final val descriptor: R|kotlinx/serialization/descriptors/SerialDescriptor|
                        public get(): R|kotlinx/serialization/descriptors/SerialDescriptor|

                    public final override fun childSerializers(): R|kotlin/Array<kotlinx/serialization/KSerializer<*>>|

                    private constructor(): R|BoxService.$rpcServiceStub.test2$rpcMethod.$serializer| {
                        super<R|kotlin/Any|>()
                    }

                }

            }

            public final companion object Companion : R|kotlin/Any| {
            }

        }

    }
    public final fun box(): R|kotlin/String| {
        ^box R|kotlinx/coroutines/runBlocking|<R|kotlin/String|>(<L> = runBlocking@fun R|kotlinx/coroutines/CoroutineScope|.<anonymous>(): R|kotlin/String| <inline=NoInline, kind=EXACTLY_ONCE>  {
            lval test1: R|kotlin/String| = Q|kotlinx/rpc/codegen/test/TestRpcClient|.R|kotlinx/rpc/withService|<R|BoxService|>().R|/BoxService.test1|(R|/TestData.TestData|(String(value)))
            lval test2: R|kotlin/String| = Q|kotlinx/rpc/codegen/test/TestRpcClient|.R|kotlinx/rpc/withService|<R|BoxService|>().R|/BoxService.test2|(R|/TestData.TestData|(String(value)))
            ^ when () {
                ==(R|<local>/test1|, String(call_42)) && ==(R|<local>/test2|, String(call_42)) ->  {
                    String(OK)
                }
                else ->  {
                    <strcat>(String(Fail: test1=), R|<local>/test1|, String(, test2=), R|<local>/test2|)
                }
            }

        }
        )
    }
